{
  "blogPosts": [
    {
      "id": "/2023/08/14/aa-compliance-accessibility",
      "metadata": {
        "permalink": "/learn/blog/2023/08/14/aa-compliance-accessibility",
        "source": "@site/blog/2023-08-14-aa-compliance-accessibility.md",
        "title": "AA Compliant Website Accessibility through WaveMaker Platform",
        "description": "Enabling AA Compliance for web apps built with WaveMaker requires a concerted effort to implement various accessibility standards across our 100+ widget collection. By following WCAG guidelines, using semantic markup, prioritizing keyboard accessibility, ensuring color contrast, providing alternative text for images, and implementing ARIA attributes, developers can create an inclusive and accessible platform for users of all abilities. Continuous testing, documentation, and training further contribute to the platform's commitment to accessibility and enable a seamless and enriching experience for all users.",
        "date": "2023-08-14T00:00:00.000Z",
        "formattedDate": "August 14, 2023",
        "tags": [],
        "readingTime": 8.275,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Bhargavi Gunda"
          }
        ],
        "frontMatter": {
          "title": "AA Compliant Website Accessibility through WaveMaker Platform",
          "author": "Bhargavi Gunda"
        },
        "nextItem": {
          "title": "Ending Support to WaveMaker 10 Projects",
          "permalink": "/learn/blog/2023/08/11/wavemaker10x-end-of-support"
        }
      },
      "content": "Enabling AA Compliance for web apps built with WaveMaker requires a concerted effort to implement various accessibility standards across our 100+ widget collection. By following WCAG guidelines, using semantic markup, prioritizing keyboard accessibility, ensuring color contrast, providing alternative text for images, and implementing ARIA attributes, developers can create an inclusive and accessible platform for users of all abilities. Continuous testing, documentation, and training further contribute to the platform's commitment to accessibility and enable a seamless and enriching experience for all users.\n\nAlthough Accessibility is designed for people with disabilities, it helps everyone in general. Accessibility promotes usability. Everyone, in general, can benefit from clear instructions, opportunities to correct form errors, simple visual layouts, high color contrast, and the option to read a transcript or captions to a video or audio recording.\nAccessibility often describes hardware and software designed to help those who experience disabilities.\n\n<!-- truncate -->\n\n## Standard practices to ensure AA compliance\n\n**WCAG 2.1 Guidelines**: The Web Content Accessibility Guidelines (WCAG) 2.1 provide the most widely recognized and accepted accessibility standards. These guidelines define criteria for making web content more accessible to users with disabilities.\n\n**Keyboard Accessibility**: All components and interactions should be operable and fully functional using only the keyboard. This ensures that users who rely on keyboard navigation or assistive devices can access all functionalities without barriers.\nProper focus management is crucial for keyboard accessibility. \n\nEnsuring that focus is clearly visible and moves in a logical order through interactive elements improves the overall accessibility web apps built with the platform.\nAll modals/dialogs with custom HTML or widgets like date, datetime made accessible by trapping the focus inside them i..e, when a user hits _Tab_ or _Shift+Tab_ or clicks around, they can't escape a certain cycle of focusable elements like anchor/button/input inside the dialog.\nThe only way to escape the focus on dialog is to close it or press _Escape_ key.\n\n\n**Semantic/native HTML**: Using these HTML elements is essential to create a well-structured and accessible user interface. This includes using proper heading tags, lists, form elements, and semantic roles to convey the meaning and relationships of content to assistive technologies.\n\n**Form Accessibility**: Forms on the platform should be designed with clear labels, error messages, and properly associated input fields. This ensures that users can understand and complete forms using assistive technologies.\nARIA (Accessible Rich Internet Applications): Implementing ARIA attributes can enhance the accessibility of dynamic and interactive components on the website. ARIA roles and properties provide additional context and information to assistive technologies.\n\n**Testing and Validation**: Regular accessibility testing and validation should be conducted during the development process. Automated testing tools, as well as manual testing with users with disabilities, can help identify and address potential accessibility issues.\n\n**Documentation and Training**: Providing comprehensive accessibility documentation and training for web app developers and users helps ensure that accessibility is consistently maintained throughout the development lifecycle.\n\n### A Holistic Approach to Embrace AA Compliance: \n\nAccessibility is not an afterthought; it's an integral part of our WaveMaker’s DNA. From the initial planning stages to the final implementation, we adopted a holistic approach to accessibility, ensuring that apps built with WaveMaker cater to everyone.\nAligning with the Web Content Accessibility Guidelines (WCAG) 2.1 AA standards, our team worked tirelessly to address host of issues with AA compliance in our widgets. Clear and consistent navigation, keyboard operability, and color contrast optimization were among the many key aspects we prioritized to create a seamless browsing experience.\n\n**1.The Power of Semantic Markup**: Recognizing that an accessible app goes beyond mere compliance, we fully embraced the potential of semantic markup. By using appropriate HTML elements with meaningful structure, we enable all users, including those with assistive technologies, to comprehend the content's context and organization effortlessly.\n\n**2.Empowering Users with Semantic Elements**: Semantic headings play a crucial role in guiding users through our website’s content. By employing a logical heading hierarchy, we empower screen readers to provide users with a comprehensive outline of the information, ensuring easy navigation and comprehension.\n\n**3.Enhanced Interactive Elements**: Our commitment to inclusivity extended to interactive elements, which received special attention. Every button, link, and form field is equipped with descriptive labels, ensuring that users, irrespective of their abilities, can fully grasp the purpose and functionality of each element.\n\n**4.The Impact of ARIA Roles**: Incorporating ARIA roles judiciously, we elevated the accessibility of our platform’s dynamic components. Navigation menus, landmark elements, and live regions were thoughtfully annotated, providing users with valuable context through assistive technologies.\n\n**5.Unlocking the Power of Data Tables**: When presenting data in tabular format, we embraced best practices for table accessibility. Meaningful table headers and descriptive captions not only aid screen readers in properly interpreting the information but also offer a seamless experience to all users.\n\n**6.Form Filling Made Accessible**: We understood the importance of form accessibility, as it directly affects users' ability to interact with our services. With clear validation messages and error handling, we created a smooth form filling experience for everyone\n\n\n### Accessibility attributes added to different widgets in WaveMaker\n\nBy incorporating many of these recommendations with a focus on accessibility and semantic markup, we aim to create a seamless and inclusive browsing experience for all users, regardless of their abilities. \n\n**Data Table**:\nImplemented proper table headers and captions for screen readers to interpret data correctly.\nEnsured that data cells are logically organized, making navigation easier for keyboard users.\nIncorporated ARIA attributes to convey additional information about the table structure.\n\n**Typography**:\nUtilized appropriate heading tags (e.g., h1, h2, etc.) to maintain a clear content hierarchy.\nEnsured sufficient contrast between text and background for readability.\nMade font size adjustable using browser settings to accommodate users with low vision.\nAdded descriptive and meaningful text labels for buttons and anchor links.\nProvided keyboard focus styling to indicate active elements for keyboard users.\nIncluded ARIA roles and states to communicate button states to screen readers.\n\n```\n<label for=\"name\">Full Name:</label>\n<input type=\"text\" id=\"name\" name=\"name\" aria-required=\"true\" />\n```\n\n**Cards**:\nMade card content accessible to screen readers by using proper semantic elements.\nEnsured focus order inside the card for keyboard navigation.\nMade card structures consistent and straightforward for easy comprehension.\n\n**Iframe**:\nAdded descriptive titles to iframes, conveying their purpose to assistive technologies.\nEnsured that the iframe content is accessible and adheres to WCAG guidelines.\n\n**Lists and Pagination**:\nUtilized semantic list elements (e.g., ul, ol) to provide clear content structure.\nAdded ARIA attributes to indicate the list role and state to screen readers.\n\n**Live Filter**:\nProvided accessible feedback to screen readers when filtering results dynamically.\nEnsured that the filter function is keyboard operable and fully functional without a mouse.\n\n**Forms**:\nImplemented form labels, legends, and placeholders to describe form elements clearly.\nEnsured proper validation messages for screen readers to identify and correct errors.\n\n```\n<button type=\"submit\" aria-label=\"Submit Form\">Submit</button>\n```\n**Form Widgets**:\nEnsured form widgets (e.g., input fields, dropdowns) are accessible and operable with a keyboard.\nProvided appropriate labels and instructions for assistive technologies.\n\n**Carousel**:\nImplemented ARIA roles and states to indicate the current slide and navigate the carousel.\nMade navigation buttons and indicators accessible with proper labeling.\n\n**Date Widget**:\nProvided ARIA live regions to announce dynamic notifications to screen readers.\nEnsured that notifications are perceivable by users with visual and hearing impairments.\n\n```\n<label for=\"eventDate\">Select Event Date:</label>\n<input type=\"date\" id=\"eventDate\" name=\"eventDate\" aria-label=\"Event Date\" />\n```\n**Progress Bar**:\nImplemented ARIA roles and states to communicate the progress status to screen readers.\nMade the progress bar keyboard accessible and focusable.\n\n**Messages**:\nEnsured that messages, such as alerts and feedback, are accessible with descriptive text.\nUsed ARIA roles to convey important information to assistive technologies.\n\n**Panel, Tile, Accordion, Tabs, Dialog, Wizard, Media**:\nEnsured that all interactive elements within these widgets are keyboard accessible.\nProvided proper labeling and ARIA attributes for enhanced screen reader support.\n\n\n### Different tools used to test Accessibility\nIn our quest to ensure accessibility compliance across our WaveMaker’s diverse range of widgets, we employ various tools and techniques to test and validate the accessibility of each element. Below are some of the tools we leverage to ensure that every widget on our platform is accessible to all users:\n\n**Screen Readers (e.g., NVDA/AssistiveLabs and VoiceOver)**: We test all widgets using popular screen readers like NVDA (NonVisual Desktop Access) and VoiceOver to experience the website as users with visual impairments would. This helps us identify issues and optimize our widgets for smooth navigation and comprehension.\n\n**Keyboard Navigation Testing**: We conduct extensive keyboard navigation testing to ensure that users can access and interact with all widgets using only the keyboard, without relying on a mouse.\n\n**ARIA Validation Tools**: We use ARIA (Accessible Rich Internet Applications) validation tools to verify the appropriate use of ARIA attributes and roles in our widgets, enhancing their compatibility with assistive technologies.\n\n**Form Accessibility Testing**: Our forms undergo rigorous accessibility testing to ensure they are easily navigable and usable with screen readers, providing descriptive labels, and handling errors effectively.\n\n**Automated Accessibility Testing Tools (e.g., Axe, Pa11y)**: We utilize automated testing tools like Axe and Pa11y to scan our widgets and identify potential accessibility issues. These tools help us streamline the testing process and catch common problems quickly.\n\n**Browser Developer Tools**: The built-in accessibility inspection tools within modern web browsers assist us in identifying and rectifying accessibility issues for each widget.\n\n**User Testing and Feedback**: Real-world testing by users with disabilities is a crucial aspect of our accessibility evaluation process. We seek feedback from diverse user groups to gain valuable insights and address any usability challenges.\n\n**Continuous Monitoring**: We continuously monitor our WaveMaker’s accessibility to ensure that any new updates or content additions maintain the same high level of accessibility compliance.\n\nBy combining these testing methods and tools, we offer excellent platform to build rich web applications that are accessible, inclusive, and easy to use for all users, regardless of their abilities or assistive technologies. Our commitment to accessibility remains an ongoing journey, and we are dedicated to providing an inclusive experience for users of every app built using WaveMaker."
    },
    {
      "id": "/2023/08/11/wavemaker10x-end-of-support",
      "metadata": {
        "permalink": "/learn/blog/2023/08/11/wavemaker10x-end-of-support",
        "source": "@site/blog/2023-08-11-wavemaker10x-end-of-support.md",
        "title": "Ending Support to WaveMaker 10 Projects",
        "description": "---",
        "date": "2023-08-11T00:00:00.000Z",
        "formattedDate": "August 11, 2023",
        "tags": [],
        "readingTime": 2.5,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Ritupurna Lenka"
          }
        ],
        "frontMatter": {
          "title": "Ending Support to WaveMaker 10 Projects",
          "author": "Ritupurna Lenka"
        },
        "prevItem": {
          "title": "AA Compliant Website Accessibility through WaveMaker Platform",
          "permalink": "/learn/blog/2023/08/14/aa-compliance-accessibility"
        },
        "nextItem": {
          "title": "Mutual TLS Support in REST APIs",
          "permalink": "/learn/blog/2022/08/23/Support-for-mutual-tls-in-rest-apis"
        }
      },
      "content": "---\n\nWe are excited to announce the upcoming release of WaveMaker Version 11.4, which will introduce various new features and improvements. With this release, we end our support for WaveMaker 10 projects. \n\nUpon launching WaveMaker 11.0 on June 6th, 2022, our users were provided with the flexibility to work on WaveMaker 10 projects while undertaking the upgrade process to WaveMaker 11, using our [Multi-version Studio](https://docs.wavemaker.com/learn/app-development/wavemaker-overview/faqs-11/#what-is-multi-version-studio). With 11.4 release, we are disabling the support for the above facility and auto-upgrading the projects to WaveMaker 11. \n\n<!-- truncate -->\n\n## What will happen?\n\nHowever, with the release of Version 11.4, we will officially discontinue support for WaveMaker Version 10 projects. This decision is aligned with our commitment to delivering the latest technology and ensuring that our users can benefit from the most up-to-date and secure features. As part of this transition, we will be ending support for WaveMaker 10.x projects by September 4, 2023.\n\n:::note\n\nOnce the 11.4 release is deployed on [wavemakeronline.com](https://www.wavemakeronline.com/studio/#/projects), WaveMaker 10 projects will undergo an automatic upgrade to 11.4.\n\n:::\n\n## What Should You Do?\n\nAfter the 11.4 release, our support team will no longer provide assistance or updates for projects running on Version 10. Therefore, we strongly recommend that you plan to migrate your projects to the latest version to continue receiving support and leverage the latest functionalities.\n\n### Migrating from WaveMaker 10.x to 11.x\n\n:::important\n\nIf you do not migrate your projects to 11.x, your projects will automatically be migrated to the latest released version i.e. 11.4.x. We recommend you initiate the upgrade to take full control of your project migration and plan it accordingly. For more information, see the release information.\n\n:::\n\nTo aid you in the process of migration, we have prepared detailed documentation on migrating from Version 10 to the latest Version 11.x. To get started with the migration process, see [Updating an App from WaveMaker 10 WaveMaker 11](https://docs.wavemaker.com/learn/how-tos/upgrade-guide-wavemaker-10-to-11).\n\n### Upgrade In-progress: Archived Apps\n\nIt is recommended to complete the migration from WaveMaker 10 to WaveMaker 11.x before the 11.4 release. To perform smooth migration, WaveMaker has provided the ability to use the multi-studio projects, this enables you to initiate migration and continue working on WaveMaker 10 projects while you simultaneously implement WaveMaker 11 upgrade. In the process of migration,\n\n#### WaveMaker 10 projects \n  \nWaveMaker 10 projects that have not been migrated will be automatically migrated to 11.4. Users might face some issues as it is migrated without their interference. \n\n#### WaveMaker 11 Projects\n\nFor the WaveMaker 10 projects for which the migration process has been initiated, WaveMaker 11 version will be moved to the Archived apps, and the WaveMaker 10 version of the project will be auto-migrated to WaveMaker 11.4.\n\n\n```mermaid\nflowchart TD\n    A[WM-10 Project] -->|upgrade in progress| B(WaveMaker 11)\n    A[WM-10 Project] -->|stable-version| C(WaveMaker 10)\n    B --> D(Archieved Project)\n    C --> E(Auto-migrated to 11.4)\n    \n```\n\nTo avoid auto-migration from WaveMaker 10 to WaveMaker 11, complete the process before 4th September 2023. In case of any assistance, reach out to our support team."
    },
    {
      "id": "/2022/08/23/Support-for-mutual-tls-in-rest-apis",
      "metadata": {
        "permalink": "/learn/blog/2022/08/23/Support-for-mutual-tls-in-rest-apis",
        "source": "@site/blog/2022-08-23-Support-for-mutual-tls-in-rest-apis.md",
        "title": "Mutual TLS Support in REST APIs",
        "description": "---",
        "date": "2022-08-23T00:00:00.000Z",
        "formattedDate": "August 23, 2022",
        "tags": [],
        "readingTime": 2.555,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Praveen Chandra"
          }
        ],
        "frontMatter": {
          "title": "Mutual TLS Support in REST APIs",
          "author": "Praveen Chandra"
        },
        "prevItem": {
          "title": "Ending Support to WaveMaker 10 Projects",
          "permalink": "/learn/blog/2023/08/11/wavemaker10x-end-of-support"
        },
        "nextItem": {
          "title": "Monitoring performance and health of deployed WaveMaker app",
          "permalink": "/learn/blog/2022/08/02/Monitoring-performance-and-health-of-deployed-WaveMaker-app"
        }
      },
      "content": "---\n\nTLS (Transport Layer Security) is an encryption protocol that encrypts all the information communicated between the client and the server. Mutual TLS is an additional configuration in which the server and client authenticate each other, and only then is the connection established. This blog explains in detail what MTLS (Mutual Transport Layer Security) is and why it is used.\n\n:::note\nWaveMaker supports MTLS from WaveMaker 11 GA onwards. For more information, see how to [Configure MTLS in WaveMaker application](/learn/how-tos/configure-mtls-in-wmapp).\n:::\n\n<!-- truncate -->\n\n## Mutual TLS\n\nMutual TLS is a configuration in which the client authenticates the server first, and then the server authenticates the client as well. The SSL connection gets established if both client and server are authenticated successfully. \n\n![Mutual-TLS](/learn/assets/mutual-tls.png)\n\n1. Client connects to the server to initiate an SSL connection.\n\n2. Server presents its certificate to the client.\n\n3. The client authenticates the server's certificate from its truststore and can verify the hostname (Optional).\n\n4. Client presents its certificate to the server.\n\n5. Server authenticates the client certificate.\n\n6. Symmetric session keys are created, and an SSL connection gets established.\n\n7. The client and server exchange information in a secure connection.\n\n### Server Authentication\n\nThe server presents its certificate to the client, and the client authenticates it. The client authenticates the server's certificate using its truststore. TrustStore is used to store certificates from Certified Authorities (CA) that authenticate the certificate presented by the server in an SSL connection. If the server is using a self-signed certificate, then a custom truststore needs to be generated with the server's certificate, and you must configure it in the client. \n\nThe client can then use this custom truststore to authenticate the server's certificate and proceed to further steps in initiating the SSL connection.\n\n### Client Authentication\n\nThe client presents its certificate to the server, and the server authenticates it. The server authenticates the client using the Keystore configured using the client key and certificate. When the server authenticates the client, then it proceeds to the further steps in initiating the SSL connection. When the client authentication is enabled along with the server authentication, it indicates that the SSL connection is configured with mutual TLS.\n\n## Why is Mutual TLS used?\n\nTypically, TLS protocol only proves the server's identity to the client, but the server cannot authenticate the client. MTLS provides an additional layer of security in which the server should authenticate the client and prevent unauthorized access. \n\n## Configure Mutual TLS in a Webserver\n\nMTLS is part of the TLS standard, and any web server that uses TLS to secure its connection should be capable of mutual authentication. In order to implement mutual authentication, the server needs to ask the client for its certificate specifically. Web servers are not configured to do this by default. For more information, see [tomcat documentation](https://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html) to configure MTLS.\n\n## WaveMaker MTLS Support in REST APIs\n\nWaveMaker now supports mutual TLS in REST APIs or imported APIs using Swagger by configuring a few properties in the application. See [Configure MTLS in WaveMaker application](/learn/how-tos/configure-mtls-in-wmapp) for more details."
    },
    {
      "id": "/2022/08/02/Monitoring-performance-and-health-of-deployed-WaveMaker-app",
      "metadata": {
        "permalink": "/learn/blog/2022/08/02/Monitoring-performance-and-health-of-deployed-WaveMaker-app",
        "source": "@site/blog/2022-08-02-Monitoring-performance-and-health-of-deployed-WaveMaker-app.md",
        "title": "Monitoring performance and health of deployed WaveMaker app",
        "description": "---",
        "date": "2022-08-02T00:00:00.000Z",
        "formattedDate": "August 2, 2022",
        "tags": [],
        "readingTime": 4.99,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Deepika Srimanthula"
          }
        ],
        "frontMatter": {
          "title": "Monitoring performance and health of deployed WaveMaker app",
          "author": "Deepika Srimanthula"
        },
        "prevItem": {
          "title": "Mutual TLS Support in REST APIs",
          "permalink": "/learn/blog/2022/08/23/Support-for-mutual-tls-in-rest-apis"
        },
        "nextItem": {
          "title": "Mitigating Spring Zero-day Vulnerability CVE-2022-22965",
          "permalink": "/learn/blog/2022/04/05/mitigating-spring-zero-day-vulnerability"
        }
      },
      "content": "---\n\nIn this blog we talk about how to make any WaveMaker application Observable by applying OpenTelemetry, Zipkin.  While accelerating application development, WaveMaker's generated code allows easy integration with best of the breed tools and applying devops best practices while operating the app in production a cinch. \n\n<!-- truncate -->\n\n## About Open Telemetry\n\nOpen telemetry is an opensource tool enabling Observability. Observability lets a developer understand an application from the outside without knowing its inner workings and helps in troubleshooting degradations in service quality. To achieve this, a developer should instrument the application. By instrumenting code to emit traces and metrics, and collecting such data developers make the application observable. \n\nOnce instrumented, the end user flows become traceable across different microservices. This data can be sent to Zipkin - a popular open source tool. \n\n## Benefits of implementing observability\nMetrics, Logs and Traces make up the [golden triangle of Observability](https://devops.com/metrics-logs-and-traces-the-golden-triangle-of-observability-in-monitoring/) of any application. WaveMaker built applications can also easily be set up for tracing.\n\n  1. Understand why the applications has slowed down.\n  2. Trace 500 error codes to figure out what went wrong among the microservices. \n  3. What if one of the application calls is taking too long than expected.\n\nOpenTelemetry tool integration with an application can help have detailed visibility of tracing an application to easily spot almost any issue or have an idea of where the problem could be. \nInstrumenting WaveMaker applications code lets you get traces for each request, along with their time slices captured in detail.\n\n## Four simple integration steps for Opentelemety\n  1. Install and Setup tools\n  2. Instrument application code\n  3. Build and Deploy application\n  4. Accessing request traces\n  \n### 1. Install and Setup tools\nHow to use OpenTelemetry integration to have complete visibility of the application, Here in this first step explains details to Install and Setup tools and integrate OpenTelemetry and Zipkin with the application deployed at Apache Tomcat.\n    \n  1. Install Zipkin as default data collector and tracing dashboard. Once the following docker command is run, browse to **http://your_host:9411** to find traces. Dashbord will be empty initially. \n  \n  ```\n            docker run -d -p 9411:9411 openzipkin/zipkin\n  ```        \n  \n  2. WaveMaker application can be deployed on specific versions of Apache Tomcat. Install Tomcat by following [installation instructions](https://docs.wavemaker.com/learn/how-tos/wavemaker-application-deployment-tomcat) and then copy step 1 downloaded opentelemetry-javaagent.jar to tomcat lib directory(**$TOMCAT_HOME/lib/**)\n  \n### 2. Instrument application code\nOpenTelemetry code instrumentation is supported for Java based applications, here are the steps  to  Instrument application code.\n  \n   1. Download latest open telemetry [opentelemetry-javaagent.jar](https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar) from the Open Telemetry repo and place the JAR at preferred directory and launch it with tomcat.\n   \n   2. Set environment variables by adding the `setenv.sh` file above the installed tomcat bin directory.\n\n`$TOMCAT_HOME/bin/setenv.sh`\n\n```         \n\texport CATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/usr/local/tomcat/lib/opentelemetry-javaagent.jar”\n\texport OTEL_TRACES_EXPORTER=“-Dotel.traces.exporter=zipkin”\n\texport  OTEL_EXPORTER_ZIPKIN_ENDPOINT=“-Dotel.exporter.zipkin.endpoint=http://<zipkin-host-ip>:<zipkin-port>/api/v2/spans”\n\texport OTEL_SERVICE_NAME=”-Dotel.service.name=<App/service name>”\n\texport JAVA_OPTS=”$JAVA_OPTS $CATALINA_OPTS $OTEL_TRACES_EXPORTER $OTEL_EXPORTER_ZIPKIN_ENDPOINT $OTEL_SERVICE_NAME”\n```\n\n:::note\nHere Zipkin server should be accessible to the tomcat server.\n:::\n\n  3. Introduce tracing code:\n    To introduce tracing and create correlations Spring AOP(Aspect Oriented Programming) code changes needed, this code can also be introduced by using the [IDE](https://docs.wavemaker.com/learn/app-development/dev-integration/extending-application-using-ides/#steps-in-working-with-ides) at WaveMaker application.  \n    Download WaveMaker Application Zip from Studio, extract the downloaded zip file to a directory and call it as `$WMAPP_HOME`\n    Navigate to the maven `pom.xml` file to add following dependencies code snippet\n    \n`$WMAPP_HOME---->pom.xml`\n\n          <dependencies>\n            <dependency>\n                  <groupId>io.opentelemetry</groupId>\n                  <artifactId>opentelemetry-sdk</artifactId>\n                  <version>1.11.0</version>\n            </dependency>\n           <dependencies>\n    \n\nNavigate to the `project-user-spring.xml` in the below path and add the given snippet\n\n\n`$WMAPP_HOME -----> src/main/webapp/WEB-INF/project-user-spring.xml`\n\n```    \n          <beans xmlns=\"http://www.springframework.org/schema/beans\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                  xmlns:aop=\"http://www.springframework.org/schema/aop\"\n              xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd \n              http://www.springframework.org/schema/aop   \n                  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \">\n                  <!--<context:component-scan base-package=\"com.aop.aspect\"/>-->\n                  <bean id=\"LogAspect\" class=\"com.aop.aspect.LogAspect\"/>\n\n              <aop:config>  \n                <aop:aspect id=\"myaspect\" ref=\"LogAspect\" >  \n                   <!-- @Before -->  \n                   <aop:pointcut id=\"pointCutBefore\" expression=\"within (com.wavemaker.*.*.controller..*) || within (com.wavemaker.runtime.rest.controller..*)|| within (com.*.*.controller..*)\"/>  \n                   <aop:before method=\"before\" pointcut-ref=\"pointCutBefore\" />\n                </aop:aspect>  \n              </aop:config>  \n          </beans>\n```\n\nCreate a new java file with given package structure and copy code to the created Java source file\n\n`$WMAPP_HOME ----->src/main/java/com/aop/aspect/LogAspect.java`\n\n```\n          package com.aop.aspect;\n\n          import org.aspectj.lang.JoinPoint;\n          import org.slf4j.Logger;\n          import org.slf4j.LoggerFactory;\n          import io.opentelemetry.api.trace.Span;\n          import javax.servlet.http.HttpServletResponse;\n          import org.springframework.beans.factory.annotation.Autowired;\n          public class LogAspect {\n\n              private static final Logger logger = LoggerFactory.getLogger(LogAspect.class);\n\n              @Autowired\n              private HttpServletResponse response;\n\n             public void before(JoinPoint jp) {\n                  Span currentSpan = Span.current();\n                  currentSpan.setAttribute(\"x-wm-request-track-id\", response.getHeader(\"x-wm-request-track-id\"));\n              }\n          }\n```\n\n### 3. Build and Deploy application\nBuild and Deploy application to reflect above instrumentation code change\n\n  1. With above changes build WaveMaker app for WAR and copy built war to tomcat setup at webapps folder `($TOMCAT_HOME/webapps)`\n \n  2. Restart the tomcat server to reflect above changes at `setenv.sh` along with the WaeMaker application.\n\n### 4. Accessing request traces\nAccessing request traces with Use Cases\nHere is the introduced sample use case at WaveMaker application to imitate calls to other external services, or another microservice and a call to database engine into the application. Following are the Zipkin screenshots where time taken by application request is spent in each function, to pin where the problem is with the call to the microservice and focus on reducing the latency in a service considering the time details exposed. Or, These traces can be used to understand what the workflow of a request is. \nAnother advantage that works is by introducing trace ID in the response payload of the WaveMaker application and using that ID to correlate with other dependency calls.\n\nEvery time when a hit to service endpoint of an application is made a trace is captured at Zipkin, to see something like this at Zipkin dashboard by accessing url **http://your_host:9411**,  here are few WaveMaker application request traces.\n\n<br/>\n<br/>\n<br/>\n\n![Zipkin-APIComposer](/learn/assets/Zipkin-APIComposer.png)\nClick on the show button to see WaveMaker API Composer call details\n\n<br/>\n<br/>\n<br/>\n\n\n![Zipkin-APIComposerList](/learn/assets/Zipkin-APIComposerList.png)\nWaveMaker API Composer call trace info with its status code(500) and Server response time details.\n\n<br/>\n<br/>\n<br/>\n\n\n![Zipkin-APIComposerSuccess](/learn/assets/Zipkin-APIComposerSuccess.png)\nWaveMaker API Composer first GET call with its status code(200) and response time details.\n\n<br/>\n<br/>\n<br/>\n\n![Zipkin-APIComposerfailed](/learn/assets/Zipkin-APIComposerfailed.png)\nWaveMaker API Composer second GET call with its status code(404) and response time details.\n\n<br/>\n<br/>\n<br/>\n\n\n![Zipkin-DBCall](/learn/assets/Zipkin-DBCall.png)\nClick on show button for WaveMaker API call details\n\n<br/>\n<br/>\n<br/>\n\n\n![Zipkin-DBList](/learn/assets/Zipkin-DBList.png)\nWaveMaker API generated to access DB trace info along with its status code(200) and response time details.\n\n<br/>\n<br/>\n<br/>\n\n![Zipkin-DBtable](/learn/assets/Zipkin-DBtable.png)\nWaveMaker API generated to access DB query and its response time details."
    },
    {
      "id": "/2022/04/05/mitigating-spring-zero-day-vulnerability",
      "metadata": {
        "permalink": "/learn/blog/2022/04/05/mitigating-spring-zero-day-vulnerability",
        "source": "@site/blog/2022-04-05-mitigating-spring-zero-day-vulnerability.md",
        "title": "Mitigating Spring Zero-day Vulnerability CVE-2022-22965",
        "description": "---",
        "date": "2022-04-05T00:00:00.000Z",
        "formattedDate": "April 5, 2022",
        "tags": [],
        "readingTime": 1.405,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Uday Shankar"
          }
        ],
        "frontMatter": {
          "title": "Mitigating Spring Zero-day Vulnerability CVE-2022-22965",
          "author": "Uday Shankar"
        },
        "prevItem": {
          "title": "Monitoring performance and health of deployed WaveMaker app",
          "permalink": "/learn/blog/2022/08/02/Monitoring-performance-and-health-of-deployed-WaveMaker-app"
        },
        "nextItem": {
          "title": "Upgrading saml to saml2-service-provider",
          "permalink": "/learn/blog/2022/03/24/saml-library-upgrade"
        }
      },
      "content": "---\n\nA new zero-day vulnerability was reported in the Spring library on **29th March 2022**, affecting the library versions **5.3.0 to 5.3.17, 5.2.0 to 5.2.19,** and older versions. The vulnerability impacts Spring MVC applications running on JDK 9+. \n\nSpring has released a new version on **31st March 2022, 5.3.18**, which fixes the vulnerability. The specific exploit requires the application to run on Tomcat as a WAR deployment. The [blog post added by Spring](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement) has more details about the vulnerability.\n\n<!-- truncate -->\n\n## Is WaveMaker Application Affected?\n\nWaveMaker 10 Apps are compiled using Java 8 and supported to deploy on Java 8 only. So ideally, WaveMaker apps are not affected. Applications deployed on Java 9+ are maybe vulnerable if the controller methods use **@ModelAttribute** or have no annotation. WaveMaker generated controllers either use **@RequestParam**, **@PathParam** or @**RequestBody**. So, they are not affected by this vulnerability. \n\n:::note\nWe recommend mitigating your application using one of the steps mentioned below in the blog as an instant fix.  WaveMaker will release a hotfix to include the Spring version update very soon.\n:::\n\n## Risk Mitigation\n\nBelow are two ways that you can follow to mitigate the risk against CVE-2022-22965 before the scheduled hotfix release.\n\n### Upgrade the Spring Version Manually in your pom.xml\n\nAdd the latest version of Spring framework bom **5.3.18** as the first dependency under the `<dependencies>` section of `<dependencyManagement>` section. Add the following dependencies as specified below.\n\n```xml\n<dependency>\n <groupId>org.springframework</groupId>\n <artifactId>spring-framework-bom</artifactId>\n <version>5.3.18</version>\n <type>pom</type>\n <scope>import</scope>\n</dependency>\n```\n\n:::note\nEnsure it is the first dependency, and it is before the `wavemaker-app-runtime-services` dependency.\n:::\n \n### Upgrade Tomcat Version\n\nUpgrade the Tomcat version to either 9.0.62 or 8.5.78, closing the attack vector on Tomcat's side."
    },
    {
      "id": "/2022/03/24/saml-library-upgrade",
      "metadata": {
        "permalink": "/learn/blog/2022/03/24/saml-library-upgrade",
        "source": "@site/blog/2022-03-24-saml-library-upgrade.md",
        "title": "Upgrading saml to saml2-service-provider",
        "description": "Security Assertion Markup Language (SAML) is an XML-based open standard for exchanging authentication and authorization data between different parties. The SAML exchanges are usually between",
        "date": "2022-03-24T00:00:00.000Z",
        "formattedDate": "March 24, 2022",
        "tags": [],
        "readingTime": 1.875,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Praveen Chandra"
          }
        ],
        "frontMatter": {
          "title": "Upgrading saml to saml2-service-provider",
          "author": "Praveen Chandra"
        },
        "prevItem": {
          "title": "Mitigating Spring Zero-day Vulnerability CVE-2022-22965",
          "permalink": "/learn/blog/2022/04/05/mitigating-spring-zero-day-vulnerability"
        },
        "nextItem": {
          "title": "WaveMaker application pom.xml",
          "permalink": "/learn/blog/2022/03/24/wavemaker-application-pom"
        }
      },
      "content": "Security Assertion Markup Language (SAML) is an XML-based open standard for exchanging authentication and authorization data between different parties. The SAML exchanges are usually between\n- Identity provider (IdP) - producer of assertions, and\n- A service provider (sp) - the consumer of assertions.\n\nThe identity provider could be any vendor like ADFS, OneLogin, Okta etc. which supports SAML-based Single Sign-On (SSO). The service provider is your WaveMaker application which makes use of Identity Provider to enable single sign-on across all your WaveMaker applications.\n\n<!-- truncate -->\n\n## Why SAML upgrade is required?\n\nWaveMaker offers many security providers which can be enabled by the user based on their requirements. SAML is one of the security providers which depends on spring security extensions dependency. The spring-security-saml2-core has reached end of life as per the [spring documentation](https://spring.io/blog/2020/09/22/spring-security-saml-extensions-1-x-eol-on-october-6-2021). It means there will no longer be any support or bug fixes for this library from spring.\n\nThe saml2-service-provider is the replacement of spring-security-saml2-core and all the WaveMaker projects that are using SAML as a security provider will be migrated.\n\n## User changes required after SAML upgrade\n\nThe new SAML library provided by spring suggests the metadata, audience url, SSO, SLO URLs which are different from the old one. So the user has to update the new URLs in their respective IDP providers. Below is a table that differentiates the old and new SAML URLs.\n\n| URL Type | spring-security-saml2-core (Existing) | saml2-service-provider (New) | \n|---|---|---|\n| Metadata | {app-url}/saml/metadata | {app-url}/saml2/service-provider-metadata/saml |\n| Audience | {app-url}/saml/metadata | {app-url}/saml2/service-provider-metadata/saml |\n| SSO | {app-url}/saml/SSO | {app-url}/login/saml2/sso/saml |\n| SLO | {app-url}/saml/SingleLogout | {app-url}/logout/saml2/slo |\n\nHere app-url can be preview or deployed URL.\n\n## Steps to update the URLs in Okta provider\n\n1. Login to the okta provider and open the configured saml application.\n2. Click on the General Settings where the metadata, audience, SSO and SLO URLs are configured.\n\n  ![general settings](/learn/assets/general-settings-okta-old-urls.png)\n\n3. Click on edit and update all the 4 URLs as shown in the below screenshot.\n  \n  ![general settings](/learn/assets/general-settings-okta-new-urls.png)\n\n4. If SLO is enabled in the application then SLO URL should also be updated.\n\n  ![general settings](/learn/assets/general-settings-okta-slo-url.png)\n  \n  Here SP issue URL is same as metadata URL.\n\n5. After updating the URLs you can preview the application and verify the SAML flow."
    },
    {
      "id": "/2022/03/24/wavemaker-application-pom",
      "metadata": {
        "permalink": "/learn/blog/2022/03/24/wavemaker-application-pom",
        "source": "@site/blog/2022-03-24-wavemaker-application-pom.md",
        "title": "WaveMaker application pom.xml",
        "description": "WaveMaker application encloses a pom.xml. It maintains the build resources, including filters, profiles, repositories, plugin management, dependencies, and user customizations.",
        "date": "2022-03-24T00:00:00.000Z",
        "formattedDate": "March 24, 2022",
        "tags": [],
        "readingTime": 2.3,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Praveen Chandra"
          }
        ],
        "frontMatter": {
          "title": "WaveMaker application pom.xml",
          "author": "Praveen Chandra"
        },
        "prevItem": {
          "title": "Upgrading saml to saml2-service-provider",
          "permalink": "/learn/blog/2022/03/24/saml-library-upgrade"
        },
        "nextItem": {
          "title": "Archiving WaveMaker 9 Projects",
          "permalink": "/learn/blog/2022/02/01/archiving-9-projects"
        }
      },
      "content": "WaveMaker application encloses a pom.xml. It maintains the build resources, including filters, profiles, repositories, plugin management, dependencies, and user customizations. \n\nYou would have to edit pom.xml when changing the dependency versions or add custom configurations for immediate fixes when needed. When you keep adding these configurations, it lengthens the generated pom.xml with the details of the application configurations and the Studio configurations that the developers only sometimes need access to. For this reason, the pom structure has been remodeled to inherit from the parent pom, making it easy to read and manage the code. \n\n<!-- truncate -->\n\n## Hierarchy with a Parent pom\n\nWe introduce the parent pom to the generated application. \n\nEvery generated application must depend on this parent pom, which contains all the generic build resources, filters, profiles, and essential profiles like development/production, repositories, and plugin management. \n\nThe parent pom furthermore depends on another pom, i.e., the wavemaker-app-dependencies pom, with all the app runtime dependencies and their versions as properties. The build-helper-maven-plugin is still in the application pom as it contains the list of services created in the application.\n\n![pom-hierarchy](/learn/assets/pom-hierarchy.png)\n\nThis model introduces less verbosity in the generated pom.xml, making it clear and concise for developers to understand, and can easily add further customization to the pom.xml.\n\nBelow is a default pom.xml generated when a WaveMaker project is created.\n\n![default-pom](/learn/assets/default-pom.png)\n\n:::note\nThe wavemaker-app-parent and wavemaker-app-dependencies pom are published to the maven repository with a new version whenever WaveMaker releases a new version.\n:::\n\n## Advantages of New Pom Structure\n\nBelow are a few advantages of adapting to the new inheritance model of pom.\n\n### Less Verbose\n \nAll the WaveMaker-related configuration is moved to the parent pom. So the generated pom is more readable, and the developer can easily understand the custom configurations.\n\n### Upgrading without Migrations\n\nIn the previous structure, any migrations made to the application would be visible to the user in their VCS. But, since all the WaveMaker-related configurations are maintained in the parent pom, it avoids confusion, and only the WaveMaker Studio version changes would be visible in the VCS.\t\n\n### Ease of Library Version Overrides\n\nUsers can easily override the application runtime libraries, databases, or security dependencies.\n\n1. By adding the new version in the properties of the application's pom.xml\n\n Example of upgrading log4j version: \n\n ![log4j-pom-example](/learn/assets/log4j-pom-example.png)\n\n2. Bypassing the property during application build.\n \n Example : **mvn clean install -Dlog4j.version=2.17.2** \n\n## Impact on Users Project\n\n- Database and Security dependencies will now have only the groupId, and artifactId. The version has been removed since it is inherited from the parent pom. If you want to change the version, you can override it by adding the version details in the properties.\n- Any custom configurations you made will still be in the pom.xml after the upgrade."
    },
    {
      "id": "/2022/02/01/archiving-9-projects",
      "metadata": {
        "permalink": "/learn/blog/2022/02/01/archiving-9-projects",
        "source": "@site/blog/2022-02-01-archiving-9-projects.md",
        "title": "Archiving WaveMaker 9 Projects",
        "description": "---",
        "date": "2022-02-01T00:00:00.000Z",
        "formattedDate": "February 1, 2022",
        "tags": [],
        "readingTime": 2.235,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "Archiving WaveMaker 9 Projects",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "WaveMaker application pom.xml",
          "permalink": "/learn/blog/2022/03/24/wavemaker-application-pom"
        },
        "nextItem": {
          "title": "URL Change in WaveMaker Android WebView",
          "permalink": "/learn/blog/2022/01/10/cordova-android-change-in-webview-url"
        }
      },
      "content": "---\n\nEarlier in this blog, we announced [ending support of WaveMaker 9 (WM) Projects](/learn/blog/2021/12/08/wavemaker9x-end-of-support). WaveMaker offered support to manage individual versions of your app with our multi-version control system so that you could simultaneously work on both WM 9 and WM 10 projects. One of the key differences between the WM 9 and WM 10 is moving from AngularJS to Angular 11. \n\nAngular laid its plan in January 2018 for the [final releases of AngularJS](https://docs.angularjs.org/misc/version-support-status) before entering long-term support (LTS) and extended the LTS due to the global pandemic until December 31, 2021. As we reach the end of life of AngularJS, we officially withdrew support of WM 9 projects starting **WM 10.12 release planned for February 2, 2022**. As a result, the existing WM 9 projects get archived.\n\n<!--truncate-->\n\n## WaveMaker Archived Apps\n\nTypically, when [initiating project migration](/learn/how-tos/guide-to-upgrade-an-app-wavemaker-9x-to-wavemaker-10-0/#initiating-the-project-upgrade), you have two versions of the project in one folder containing WM 9 and WM 10 projects. \n\nThe following diagram illustrates which projects move to the archived location. \n\n![](/learn/assets/wm9-projects-archive-architecture.png)\n\n### Project Upgraded\n\n**Case-1:** When you finish the upgrade process, the WM 9 project gets archived in that folder. In this case, the upgraded project, WM 10, remains in WaveMaker apps and has all functionality that a regular WaveMaker app has. The WM 9 version of the project moves to the archived location, which should be safe to delete. \n\n### Upgrade in Progress\n\n**Case-2:** The projects that have just initiated the upgrade, move to the Archive location as individual projects of their own versions, such as WM 9 and WM 10 projects. These projects automatically move to the Archive location separately. To work on these projects, you can download the project as Zip and import; the project gets imported as a WM 10 version.\n\n### Upgrade not Initiated\n\n**Case-3:** The projects that have not yet initiated upgrading to WM 10 move to the Archived location as is. You can still import the project as zip and import to use its content.\n\n## Accessing Archived Apps\n\nIn WaveMaker Studio, navigate to the topnav tabs displaying WaveMaker apps.\n\n- Go to the **Archived Apps** tab. You can view all your archived apps here.\n\n![screenshot showing how to locate](/learn/assets/wm9-archived-projects.png)\n\n### Archived Actions\n\nArchived apps are accessible with limited access. Allowed actions include:\n\n- Download Project as Zip\n- Delete Project\n\n## WM 9 Project Deployments Not Supported\n\nWith WM 9 projects archived, deploying WM 9 apps are not supported anymore. WaveMaker will not display WM 9 projects in **Manage Deployed Apps**. All the details related to the project, including logs, releases, history, and app URLs, are removed. However, you can continue to access deployed apps on servers, such as AWS, Google, Azure."
    },
    {
      "id": "/2022/01/10/cordova-android-change-in-webview-url",
      "metadata": {
        "permalink": "/learn/blog/2022/01/10/cordova-android-change-in-webview-url",
        "source": "@site/blog/2022-01-10-cordova-android-change-in-webview-url.md",
        "title": "URL Change in WaveMaker Android WebView",
        "description": "---",
        "date": "2022-01-10T00:00:00.000Z",
        "formattedDate": "January 10, 2022",
        "tags": [],
        "readingTime": 1.43,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Srinivasa Rao Boyina"
          }
        ],
        "frontMatter": {
          "title": "URL Change in WaveMaker Android WebView",
          "author": "Srinivasa Rao Boyina"
        },
        "prevItem": {
          "title": "Archiving WaveMaker 9 Projects",
          "permalink": "/learn/blog/2022/02/01/archiving-9-projects"
        },
        "nextItem": {
          "title": "Announcement about Angular 11 Update",
          "permalink": "/learn/blog/2021/12/17/angular-11-update"
        }
      },
      "content": "---\n\nIn WaveMaker 10.10, Cordova-android is upgraded to 10.1.0. With that change, it is observed that third-party cookies are not getting stored on the WebView. Cookies are required for WaveMaker authentication. So, a plugin **[wm-cordova-plugin-advanced-http](https://www.npmjs.com/package/wm-cordova-plugin-advanced-http)** was used to make ajax calls instead of browser XHR. Following are the drawbacks of using the plugin.\n\n- All network calls are logged into the console of chrome dev tools instead of the network tab.\n- There are gaps between plugin API and XmlHttpRequest. Some of these gaps are addressed in the WaveMaker platform to make it work in WaveMaker without any changes in the existing code.\n\nIn WaveMaker 10.11, another method is implemented to solve the cookie problem.\n\n<!--truncate-->\n\n## Method\n\n[Cordova allows developers to set the hostname](https://cordova.apache.org/announcements/2021/07/20/cordova-android-10.0.0.html) through preference in config.xml. 'localhost' is the default hostname. Using this hostname preference, WaveMaker platform automatically sets the server path's (given in export Cordova zip dialog) domain as the hostname. This is done during Cordova zip export. Thus, all cookies from the server path become first-party cookies, and WebView is allowing them to be stored.\n\n\n## Changes needed from the Developer\n\nBy default, this methodology gets implemented in all projects. If the hostname preference is mentioned in config.xml under the Android platform, then WaveMaker does not apply this change and fallback to plugin usage. No changes are required from the WaveMaker developer.\n\n## Changes to note\n\nIn Android Apps, location.href now has the server domain as the host. All local app files are served at path **https://${server_domain}/_www**.\n\n## Additional Info\n\nAs iOS does not allow to set scheme as HTTP/HTTPS, this same methodology does not work for iOS. So, the plugin is still being used in iOS for marking AJAX calls."
    },
    {
      "id": "/2021/12/17/angular-11-update",
      "metadata": {
        "permalink": "/learn/blog/2021/12/17/angular-11-update",
        "source": "@site/blog/2021-12-17-angular-11-update.md",
        "title": "Announcement about Angular 11 Update",
        "description": "---",
        "date": "2021-12-17T00:00:00.000Z",
        "formattedDate": "December 17, 2021",
        "tags": [],
        "readingTime": 1.4,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "Announcement about Angular 11 Update",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "URL Change in WaveMaker Android WebView",
          "permalink": "/learn/blog/2022/01/10/cordova-android-change-in-webview-url"
        },
        "nextItem": {
          "title": "Mitigating Log4J 2 Vulnerability CVE 2021 44228",
          "permalink": "/learn/blog/2021/12/13/zero-day-vulnerability"
        }
      },
      "content": "---\n\nWaveMaker generates code for applications based on Angular. As part of the continuous improvement efforts, we upgrade WaveMaker to the next major Angular version, 11, in the **release 10.11**, scheduled for the second week of January 2022. \n\n| Current version | Updating to | \n|---|---|\n| Angular 10.2.5 | 11.2.14 |\n\nTo learn more, see [Angular Version 11 - what's in the release](https://blog.angular.io/version-11-of-angular-now-available-74721b7952f7).\n\n<!--truncate-->\n\n:::note\nAngular 10 is scheduled to end its support by 24th Dec 2021. For more information, see [Angular Support Details](https://angular.io/guide/releases#support-policy-and-schedule).\n:::\n\n### Testing Apps on WaveMaker 10.11 Beta\n\n:::note\nApplies to WaveMaker Online (WMO) and WaveMaker Enterprise (WME) users.\n:::\n\nWe invite you to test your applications on the WaveMaker 10.11 beta before officially releasing the 10.11 version. This service is exclusively provided on request. Please get in touch with our [support](mailto:support@wavemaker.com) team to access the WaveMaker 10.11 beta service.\n\nThe areas change in WaveMaker has been with how lazy loading of JS artifacts work. Our QA team has tested this area, and the release candidate build is now deployed on staging. While testing your applications, pay closer attention to the areas of your application that may be using [Prefabs](/learn/app-development/custom-widgets/creating-prefabs) and [Partials](/learn/app-development/ui-design/page-concepts/partial-pages) in particular. \n\n#### To do\n\n- [ ] Run and test applications containing Prefabs\n- [ ] Run and test applications containing Partials\n\n### What's Deprecated?\n\nSupport of IE 9 and 10 was deprecated in Angular 10 and removed entirely in Angular 11. \n\n:::note\nThis Angular update does not include Ivy Engine but covers critical bug fixes and performance improvements. As part of the process, we continue to use View Engine and will move to use Ivy in the subsequent major release.\n:::"
    },
    {
      "id": "/2021/12/13/zero-day-vulnerability",
      "metadata": {
        "permalink": "/learn/blog/2021/12/13/zero-day-vulnerability",
        "source": "@site/blog/2021-12-13-zero-day-vulnerability.md",
        "title": "Mitigating Log4J 2 Vulnerability CVE 2021 44228",
        "description": "---",
        "date": "2021-12-13T00:00:00.000Z",
        "formattedDate": "December 13, 2021",
        "tags": [],
        "readingTime": 2.935,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Uday Shankar"
          }
        ],
        "frontMatter": {
          "title": "Mitigating Log4J 2 Vulnerability CVE 2021 44228",
          "author": "Uday Shankar"
        },
        "prevItem": {
          "title": "Announcement about Angular 11 Update",
          "permalink": "/learn/blog/2021/12/17/angular-11-update"
        },
        "nextItem": {
          "title": "Ending Support of WaveMaker 9 Projects",
          "permalink": "/learn/blog/2021/12/08/wavemaker9x-end-of-support"
        }
      },
      "content": "---\n\n:::important\n### WMO (WaveMaker Online) Users \n\n***Updated on 24-Jan-2022***\n\nWaveMaker has released 10.11.1 on 24 Jan 2021, updating Log4j2 dependency, which mitigates against the vulnerability [CVE-2021-44832](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44832). For more information about the release, see [WaveMaker 10.11.1](/learn/wavemaker-release-notes/v10-11-1).\n\n- Log4j2 upgraded to **2.17.1**\n\n***Updated on 23-Dec-2021***\n\nWMO (WaveMaker Online) has released 10.10.3 on 23 Dec 2021, updating Log4j2 dependency, which mitigates against the vulnerability [CVE-2021-45105](https://nvd.nist.gov/vuln/detail/CVE-2021-45105). For more information about the release, see [WaveMaker 10.10.3](/learn/wavemaker-release-notes/v10-10-3).\n\n- Log4j2 upgraded to **2.17.0**\n\n***Updated on 16-Dec-2021***\n\nWMO (WaveMaker Online) has released 10.10.2 on 16 Dec 2021, updating Spring and Log4j2 dependencies, which mitigates against vulnerabilities [CVE-2021-44228](https://nvd.nist.gov/vuln/detail/CVE-2021-44228) and [CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096). For more information about the release, see [WaveMaker 10.10.2](/learn/wavemaker-release-notes/v10-10-2).\n\n\n- Log4j2 upgraded to **2.16.0**\n- Spring Framework upgraded to **5.3.13**\n\n### Action items\n\n1. If you are a WaveMaker Online (WMO) user and have already mitigated risk by adding [Log4j2 dependencies](#maven-upgrade-the-log4j2-version-manually) to **2.15.0** or **2.16.0** or **2.17.0**, you need to undo those changes from the **`<dependencies>`** section in `pom.xml`. \n\n2. Also, there is no need to add the [System property or Environment variable](#system-properties-disable-lookups-in-log4j2) in the deployment section if you redeploy with the latest project build.\n:::\n\n:::caution\n### WME (WaveMaker Enterprise) Users \n\nWaveMaker Enterprise users should continue to follow the risk mitigation provided in this blog.\n:::\n\nA zero-day vulnerability is an unintentional software security flaw identified in the application, poses a zero-day threat. \n\nA new [zero-day vulnerability](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228) was reported in the Log4j2 library on 9th Dec 2021, **affecting the library versions >=2.0-beta9 and <=2.14**. It has the potential to allow an attacker to execute the code remotely. Log4j has provided the fix by releasing the 2.15.0 version on the same day. Plus, Log4j has released a newer 2.17.0 version, which is available for production now. For more information, see [LOG4J changes report](https://logging.apache.org/log4j/2.x/changes-report.html#a2.17.0).\n\n<!--truncate-->\n\n## Is WaveMaker Application Affected?\n\nWaveMaker applications that depend on Log4j2 **2.14.1** (WM 10.10.1) or lower versions are at risk of the zero-day vulnerability. \n\n# Risk Mitigation\n\nThere are two ways to mitigate the risk before the planned hotfix release.\n\n## Maven: Upgrade the Log4j2 Version Manually\n\nAdd the latest version of Log4j2 **2.17.0** dependencies in the **`<dependencies>`** section, and NOT under the `<dependencyManagement>` section in your project's `pom.xml` file.\n\n:::note\nSince this mitigation needs a change in the project, the application must be rebuilt and redeployed.\n:::\n\n```xml\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>2.17.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.17.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j-impl</artifactId>\n    <version>2.17.0</version>\n</dependency>\n```\n\n## System Properties: Disable Lookups in Log4j2\n\nSet either the System Property **`log4j2.formatMsgNoLookups`** or Environment Variable **`LOG4J_FORMAT_MSG_NO_LOOKUPS`** to **`True`**. This mitigation does not need rebuilding of the war file. Tomcat or any web application server where the WaveMaker application is running needs to be set to one of the above-mentioned properties and restarted.\n\n:::note\nThis mitigation is required in the runtime environment; therefore, there is no need to rebuild the application. Restarting the Tomcat or Web server would be enough.\n:::\n\n#### Examples for Apache Tomcat\n\nFollow the below-specified changes to set the System property and System environment variable.\n\n\n### Unix and Mac Systems\n\nAdd the below in the `setenv.sh` file of the Tomcat bin folder. \n\n1. The following adds a System property.\n\n```\nexport JAVA_OPTS=\"$JAVA_OPTS -Dlog4j2.formatMsgNoLookups=true” \n```\n\n2. The following add an Environment variable.\n\n```\nexport LOG4J_FORMAT_MSG_NO_LOOKUPS=true \n```\n\n### Windows System \n\nAdd the below in the `setenv.bat` file of the Tomcat bin folder.\n\n1. The following adds a System property.\n\n```\nset JAVA_OPTS=\"%JAVA_OPTS% -Dlog4j2.formatMsgNoLookups=true”\n```\n\n2. The following adds an Environment variable.\n\n```\nset LOG4J_FORMAT_MSG_NO_LOOKUPS=true \n```\n\n## WaveMaker Log4j2 Vulnerability Releases\n\n[WaveMaker v10.10.3](/learn/wavemaker-release-notes/v10-10-3)  \n[WaveMaker v10.10.2](/learn/wavemaker-release-notes/v10-10-2)"
    },
    {
      "id": "/2021/12/08/wavemaker9x-end-of-support",
      "metadata": {
        "permalink": "/learn/blog/2021/12/08/wavemaker9x-end-of-support",
        "source": "@site/blog/2021-12-08-wavemaker9x-end-of-support.md",
        "title": "Ending Support of WaveMaker 9 Projects",
        "description": "The End of Support (EOS) stage marks the official withdrawal of support for WaveMaker 9.x projects.",
        "date": "2021-12-08T00:00:00.000Z",
        "formattedDate": "December 8, 2021",
        "tags": [],
        "readingTime": 3.86,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "Ending Support of WaveMaker 9 Projects",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Mitigating Log4J 2 Vulnerability CVE 2021 44228",
          "permalink": "/learn/blog/2021/12/13/zero-day-vulnerability"
        },
        "nextItem": {
          "title": "Git Branching Strategy",
          "permalink": "/learn/blog/2021/09/17/git-branching-strategy"
        }
      },
      "content": "The End of Support (EOS) stage marks the official withdrawal of support for WaveMaker 9.x projects. \n\nWaveMaker app development generates Angular code, as Angular marks the official withdrawal of the previous Angular versions, including AngularJS and Angular 1.x. Therefore, WaveMaker will be ending the support of WaveMaker 9.x projects that use AngularJS and Angular 1.x by 31 Jan 2022, as [Angular announced](https://docs.angularjs.org/misc/version-support-status). The update is primarily focused on improving performance, security, and bug fixes.\n\nWe have covered some essential FAQs to help you understand how you can migrate to the latest version of WaveMaker Studio.\n\n<!-- truncate -->\n\n## What does the end of support for WaveMaker 9.x entail? \n\nSuppose you are using 9.x projects. In that case, WaveMaker will automatically update to the latest version of WaveMaker. The update can break applications that contain custom JavaScript code because of the Angular breaking changes. We have created a guide to help you update to the current version used by WaveMaker, Angular 10.\n\nPlease note that following 31 Jan 2022, we will not be supporting project migrations. Therefore, we recommend you plan to update your WaveMaker 9 projects to receive support before the established deadline for a smooth migration process.\n\n## Why is WaveMaker ending support for the 9.x version?\n\nEnd of previous version system means moving on to newer and better systems. Even though some updates are not entirely responsible for security vulnerabilities, they might impact stability and usability. Other updates address bug fixes and customer-requested features.\n\nView the progress of WaveMaker features and fixes in Studio.\n\n![end of support](/learn/assets/end-of-support.png)\n\n**A glimpse of the updates**:\n\n- Outdated application stack: AngularJS ends the support by 31 Jan 2022, including security issues. [Learn more about AngularJS version support status](https://docs.angularjs.org/misc/version-support-status)\n- Latest angular stack Angular 10\n- Several performance improvements\n- Security vulnerabilities in the dependent third party libraries to get the benefits of [up to date technology stack](/learn/wavemaker-release-notes#technology-stack)\n- Support for new [compression technique](/learn/wavemaker-release-notes/v10-2-0#enhancements)\n- Enabling [micro frontend enablement](/learn/wavemaker-release-notes/v10-5-0/#support-for-microfrontend-single-spa-framework)\n- Wavemaker-generated code is now [Veracode certificated](weaving-security-into-low-code-development/)\n- [ngx-bootstrap upgrade](/learn/wavemaker-release-notes/v10-4-0/#upgrade-to-latest-version-of-ngx---bootstrap) with enhanced features\n\n**Some Examples of UI Enhancements**:\n\n- Enhanced DSL APIs exposed on various widgets\n- Advanced client-side and server-side validations on Form fields\n- Custom Data Formatters for UI widgets\n- Summary row in Datatable widget\n- Ability to add multiple views in a prefab through partials\n- Ability to provide widget level properties in a prefab\n- Adding tablet view support to Mobile apps\n\nAnd so much more. Read [WaveMaker release notes](/learn/wavemaker-release-notes) to understand the features and fixes better.\n\n## How do I know if I have WaveMaker 9.x apps?\n\nWhen you launch WaveMaker Studio, you can see the orange bar at the top indicating that you are using 9.x projects. \n\nWhen you start the project update, the project card converts into a folder. The folder contains all the versions of the app, including WM 9.x and WM 10.0. You can independently work on both versions.\n\n![two versions of the project](/learn/assets/two-versions-9-10-apps.png)\n\nFor more information and a guide to update, see [Upgrading an App from WaveMaker 9.x to WaveMaker 10.0](/learn/how-tos/guide-to-upgrade-an-app-wavemaker-9x-to-wavemaker-10-0/).\n\n## How WaveMaker will help you with the update?\n\nUpdating Angular is not relatively straightforward. However, our developers at WaveMaker have made it a little easier for you. When you initiate an update, WaveMaker takes care of the major part behind the scenes. \n\nEven so, if you have included customizations, i.e., adding custom JavaScript code, you'll have to check and accept changes manually by verifying every single customization that runs through the process. This approach is taken care of by the [inspection framework](/learn/app-development/dev-integration/inspection-framework/) that we explicitly developed to guide you through the migration process. Further to this, you can reach out to our support team for more assistance. \n\n## What does end of support mean for your customers?\n\nThe deployed apps will not be affected by the change to the end-users.\n\n## What happens if you do not upgrade to WaveMaker 10?\n\nIf you have already deployed the 9.x WaveMaker applications, the change will not affect it. However, making alterations would no longer be possible for the app. \n\n### WaveMaker Online (WMO)\n\nThe application projects will automatically upgrade to the latest version of the Studio. \n\n### WaveMaker Enterprise (WME)\n\nYou will no longer receive support, and we cannot offer the license extension.\n\n## WaveMaker 10 Releases\n\n- [WaveMaker 10 Preview](/learn/wavemaker-release-notes/v10-0-preview)\n- [WaveMaker 10.GA](/learn/wavemaker-release-notes/v10-0-ga)\n- [WaveMaker 10.1](/learn/wavemaker-release-notes/v10-1-0)\n- [WaveMaker 10.2](/learn/wavemaker-release-notes/v10-2-0)\n- [WaveMaker 10.3](/learn/wavemaker-release-notes/v10-3-0)\n- [WaveMaker 10.4](/learn/wavemaker-release-notes/v10-4-0)\n- [WaveMaker 10.5](/learn/wavemaker-release-notes/v10-5-0)\n- [WaveMaker 10.6](/learn/wavemaker-release-notes/v10-6-0)\n- [WaveMaker 10.7](/learn/wavemaker-release-notes/v10-7-0)\n- [WaveMaker 10.8](/learn/wavemaker-release-notes/v10-8-0)\n- [WaveMaker 10.9](/learn/wavemaker-release-notes/v10-9-0)\n- [WaveMaker 10.10](/learn/wavemaker-release-notes/v10-10-0)\n- [WM 10.10.3 - Log4j2 Dependency Vulnerability](/learn/wavemaker-release-notes/v10-10-3)\n\nFor the detailed list of releases, including biweekly ones, see [WaveMaker Release Notes](/learn/wavemaker-release-notes)."
    },
    {
      "id": "/2021/09/17/git-branching-strategy",
      "metadata": {
        "permalink": "/learn/blog/2021/09/17/git-branching-strategy",
        "source": "@site/blog/2021-09-17-git-branching-strategy.md",
        "title": "Git Branching Strategy",
        "description": "Project branching allows developers to checkout code from the existing git branch and isolates their work from others. If you are a member of WaveMaker Teams, read further to understand best practices for managing branches in WaveMaker.",
        "date": "2021-09-17T00:00:00.000Z",
        "formattedDate": "September 17, 2021",
        "tags": [],
        "readingTime": 3.5,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Tarun Dubey"
          }
        ],
        "frontMatter": {
          "title": "Git Branching Strategy",
          "author": "Tarun Dubey"
        },
        "prevItem": {
          "title": "Ending Support of WaveMaker 9 Projects",
          "permalink": "/learn/blog/2021/12/08/wavemaker9x-end-of-support"
        },
        "nextItem": {
          "title": "Important Announcement about Angular 10 Update",
          "permalink": "/learn/blog/2021/09/01/angular-10-update"
        }
      },
      "content": "Project branching allows developers to checkout code from the existing git branch and isolates their work from others. If you are a member of WaveMaker Teams, read further to understand best practices for managing branches in WaveMaker. \n\n<!--truncate-->\n\nIn Git flow, the **main** (or master) branch contains your production-ready code. You can use the **main** (or master) branch for CI/CD integration. The other branches, feature branches, hotfix branches should contain work on new features and bug fixes and will be merged back into the **main** (or master) branch when the work is finished and properly reviewed.\n\n![branching model](/learn/assets/branching-model.png)\n\n## Git Flow Considerations\n\nWhile working with the Git flow branching strategy, there are six principles you should adhere to to ensure you maintain good code.\n\n1. Any code in the main(or master) branch should be deployable, production-ready.\n2. Create new descriptively-named branches off the main branch for new work, such as feature/add-new-payment-types.\n3. Commit new work to your local branches and regularly push work to the remote.\n4. To request feedback, help, or when you think your work is ready to merge into the main branch, open a pull request. \n5. After your work or feature has been reviewed and approved. It can be merged into the main branch.\n6. Once your work has been merged into the main branch, it should be deployed.\n\n## Advantages of Git Flow\n\n1. Because of the simplicity of the workflow, this Git branching strategy allows for Continuous Delivery and Continuous Integration.\n2. This Git branch strategy works great for small teams and web applications.\n\n## Implementing in WaveMaker\n\n  ![features branching](/learn/assets/features-branching.png)\n\nWaveMaker supports the creation of a project using an existing branch in Git. We can follow the above Git model using the below steps:\n\n1. Creating an Application (for example, SampleApp) from WaveMaker will create a repository with the **main** (or master) branch in Git. \n2. By Default, all Contributors of this Project will push their changes to **main** (or master).\n3. Anything in the **main** (or master) branch is deployable.\n4. The above application will always point to the **main** (or master) branch. \n\n:::warning\n- Use this application to always PULL from **main** (or master) branch.\n- Do not commit to the **main** ( or master) directly. Do not hotfix into **main** (or master). Instead, use a feature/hotfix branch.\n:::\n\n5. To work on something new, go to the Git portal (for example, Github, Gitlab etc) and create a branch from **main** (or master) in the repository (for example, SampleApp). Give it a descriptive name (for example, feature/new-oauth2-scopes).\n\n![create a branch](/learn/assets/create-a-branch.png)\n\n6. Now again, from WaveMaker, go to option **Create Project Branch** for the application mentioned above (for example, SampleApp), and create a project branch by selecting the appropriate branch. Following the above example, we’ll select branch `feature/new-oauth2-scopes`. This will create a new branch project, pointing to the branch `feature/new-oauth2-scopes`. \n\n![wm project branch](/learn/assets/wm-project-branch.png)\n\n![create project existing branch](/learn/assets/create-project-existing-branch.png)\n\n7. Developers can start collaborating and working on this project, named `feature/new-oauth2-scopes`, and can regularly push their work.\n    1. Developers can review the changes using **Preview** in WaveMaker.\n\n    ![preview application](/learn/assets/preview-application.png)\n \n    2. Users can also deploy the feature branch to an external testing environment using a branch from Git or exporting a war file from WaveMaker. Refer to the below screenshot to download the war file. \n\n    ![project as war](/learn/assets/project-as-war.png)\n\n8. After the required changes are done and tested in the feature branch, you can merge it into the **main** (or master). Merging the feature branch into the **main** (or master) branch is done outside of WaveMaker and through Git portals like Github, Gitlab, etc.\n\n    1. In our example, Merge `feature/new-oauth2-scopes` branch into the **main** (or master) branch from Git portals like Github, Gitlab, etc.\n\n9. Once it is merged and pushed to **main** (or master) branch, you can PULL the latest changes into the **main** (Master) Project (refer to Steps 1, 2 & 3) and deploy from WaveMaker or use CI/CD to deploy from the **main** (Master) branch.\n    1. Users can deploy from a master project from WaveMaker for Testing the **main** (or master) branch.\n\n    ![deploy from master](/learn/assets/deploy-from-master.png)\n\n    2. User can configure the **main** (or master) for Continuous Integration and Continuous Deployment in their external deployment pipeline."
    },
    {
      "id": "/2021/09/01/angular-10-update",
      "metadata": {
        "permalink": "/learn/blog/2021/09/01/angular-10-update",
        "source": "@site/blog/2021-09-01-angular-10-update.md",
        "title": "Important Announcement about Angular 10 Update",
        "description": "WaveMaker currently generates code based on Angular 9 for applications. With the announcement on ending support of Angular 9, we are upgrading to the next Angular version, 10.2.5.",
        "date": "2021-09-01T00:00:00.000Z",
        "formattedDate": "September 1, 2021",
        "tags": [],
        "readingTime": 1.91,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "Important Announcement about Angular 10 Update",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Git Branching Strategy",
          "permalink": "/learn/blog/2021/09/17/git-branching-strategy"
        },
        "nextItem": {
          "title": "Accessibility Support in WaveMaker",
          "permalink": "/learn/blog/2021/08/23/accessibility-feature"
        }
      },
      "content": "WaveMaker currently generates code based on Angular 9 for applications. With the announcement on ending support of Angular 9, we are upgrading to the next Angular version, 10.2.5. \n\nConsequently, we have developed a roadmap to update the platform with the **Release 10.9** scheduled for the 13th of September 2021, which includes the Angular 10 update. If you are a WaveMaker application developer who uses your own infrastructure to build and deploy the application, you need to read further.\n\nThis update requires you to take action, i.e., updating the Node and NPM versions. To avoid breaking changes, we have recommended the following steps described in this blog post. \n\n<!--truncate-->\n\n:::note\nPlease note that this Angular update does not include Ivy Engine but covers some critical bug fixes. As part of the process, we continue to use View Engine and will move to use Ivy in the subsequent versions.\n:::\n\n## What's in the Update\n\nThis update impacts building WaveMaker apps using your own [CI/CD pipeline](/learn/app-development/deployment/deployment-overview) using the [Angular Build](/learn/app-development/deployment/build-options#angular-build). \n\n|Description| Current Version | Moving to|\n|---|---|---|\n|**Node** | 10.15 | 12.22.3 |\n| **NPM**| 6.4 | 6.14.13 |\n\n:::important\n**Update Node JS Version**: Angular 10 requires Node JS version 12.22.3. So you must upgrade Node and NPM on your build infrastructure with the versions mentioned above.\n:::\n\n## How WaveMaker can Help\n\nThere are two ways to upgrade to your build system with Angular 10.\n\n1. Download and install Node and NPM in the build system with the versions specified above.\n2. Use resources provided by WaveMaker team.\n\n### Using Docker Option\n\nIf you are using Docker images for building WaveMaker application, you can use them in the following ways:\n\n- Using them from the public repo containing pre-built Docker image developed and published by WaveMaker.\n- Using Docker files to build the Docker images. For more information, see [Build with Docker](/learn/app-development/deployment/build-with-docker). \n\n### Testing your Application\n\n:::tip\nTo make the transition smooth, we can provide the beta link on demand to test your application. Please reach out to the [support team](mailto:support@wavemaker.com) for more details. \n:::\n\nWe recommend you test the application to see if the build is successful. For this, you must test the application using the [Angular Build](/learn/app-development/deployment/build-options#angular-build). If the build fails, we request you to contact our support team with logs."
    },
    {
      "id": "/2021/08/23/accessibility-feature",
      "metadata": {
        "permalink": "/learn/blog/2021/08/23/accessibility-feature",
        "source": "@site/blog/2021-08-23-accessibility-feature.md",
        "title": "Accessibility Support in WaveMaker",
        "description": "Accessibility is essential for individuals and organizations that want to create high-quality websites and applications. It enables people with disabilities to use different Assistive Technologies (AT) and Adaptive Strategies for the business benefits of Web Accessibility. WaveMaker also focuses on enabling their product with international standards for Web Accessibility from World Wide Web Consortium (W3C), including Web Content Accessibility Guidelines (WCAG) and Web Accessibility Initiative - Accessible Rich Internet Applications (WAI-ARIA) as the first step in applying them.",
        "date": "2021-08-23T00:00:00.000Z",
        "formattedDate": "August 23, 2021",
        "tags": [],
        "readingTime": 2.04,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Lovin Ahmed"
          }
        ],
        "frontMatter": {
          "title": "Accessibility Support in WaveMaker",
          "author": "Lovin Ahmed"
        },
        "prevItem": {
          "title": "Important Announcement about Angular 10 Update",
          "permalink": "/learn/blog/2021/09/01/angular-10-update"
        },
        "nextItem": {
          "title": "Generating .aab files using wm-cordova-cli or AppChef",
          "permalink": "/learn/blog/2021/07/19/aab-support"
        }
      },
      "content": "**Accessibility** is essential for individuals and organizations that want to create high-quality websites and applications. It enables people with disabilities to use different Assistive Technologies (AT) and Adaptive Strategies for the business benefits of Web Accessibility. WaveMaker also focuses on enabling their product with international standards for Web Accessibility from World Wide Web Consortium (W3C), including Web Content Accessibility Guidelines (WCAG) and Web Accessibility Initiative - Accessible Rich Internet Applications (WAI-ARIA) as the first step in applying them. \n\n<!-- truncate -->\n\n## Why Accessibility?\n\nAlthough Accessibility is designed for people with disabilities, it helps everyone in general. Accessibility promotes usability. Everyone, in general, can benefit from clear instructions, opportunities to correct form errors, simple visual layouts, high color contrast, and the option to read a transcript or captions to a video or audio recording.\n\nIn the IT world, Accessibility often describes hardware and software designed to help those who experience disabilities. \n\n\n### Features of Accessibility Websites\n\n* Good use of HTML headings\n* Accessible with the keyboard\n* Accessible images\n* Accessible menus\n* Accessible forms\n* Accessible tables\n* Effective use of color\n* Meaningful link text\n\n## Accessibility in WaveMaker\n\nTo make components accessible, all the text on the web page must be unique, along with its captions and roles. To make it possible, we have introduced **aria-labels** attributes for all the `wm-widgets` which are configurable and certain [Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles) to identify every component as per their standard behavior. This ARIA \"roles\" and \"attributes\" will benefit the group of people using Assistive Technology Readers (ATR) to read the text and the purpose of the widget aloud to the users. \n\nWaveMaker Accessibility enhancements will cover Web Content Accessibility Guidelines (WCAG) \"A\" and \"AA\" compliance for all non-text content, including the following.\n\nName Role & Value, Info, Relationships, Meaning Sequence, Sensory Characteristics, Identify Input Purpose, Non-Text Contrast, Page Titled, Headings and Labels, Label in Name, Language of Page, Status Messages, Error Prevention.\n\n\n### Good Use of Headings\n\nTo make good use of headings on a page, add CSS class name from the **Style** properties tab, for example .h1, .h2, .h3, etc. Using any of the above headings class name, an attribute **\"aria-level\"** will be assigned to the HTML structure to make the screen readers understand the text specificity while scanning a page. You can copy the heading caption to the *hint* property to make it ARIA accessible.\n \nFor more information on how to use accessibility, see [Accessibility in WaveMaker](/learn/app-development/ui-design/accessibility)."
    },
    {
      "id": "/2021/07/19/aab-support",
      "metadata": {
        "permalink": "/learn/blog/2021/07/19/aab-support",
        "source": "@site/blog/2021-07-19-aab-support.md",
        "title": "Generating .aab files using wm-cordova-cli or AppChef",
        "description": "Android App Bundle (aab) is a new and an alternate to Android application package (apk).",
        "date": "2021-07-19T00:00:00.000Z",
        "formattedDate": "July 19, 2021",
        "tags": [],
        "readingTime": 1.84,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Srinivasa Rao Boyina"
          }
        ],
        "frontMatter": {
          "title": "Generating .aab files using wm-cordova-cli or AppChef",
          "author": "Srinivasa Rao Boyina"
        },
        "prevItem": {
          "title": "Accessibility Support in WaveMaker",
          "permalink": "/learn/blog/2021/08/23/accessibility-feature"
        },
        "nextItem": {
          "title": "WaveMaker Studio enables faster database imports",
          "permalink": "/learn/blog/2021/06/24/faster-database-imports-in-studio"
        }
      },
      "content": "Android App Bundle (aab) is a new and an alternate to Android application package (apk). \nGoogle introduced this format mainly to reduce the size of installer for end users. Please check [this](https://developer.android.com/platform/technology/app-bundle) post from Google to learn about aab. Starting from @wavemaker/wm-cordova-cli@2.0.0, generation of aab files from WaveMaker mobile projects is supported.  \n\n<!-- truncate -->\n\n## Bundle Tool\n\nAn **aab** file cannot be installed directly on a device. This is a format for publishing to Play Store. For development, **apk** can still be used. Incase if you want to install aab file, apk file has to be generated from aab file. Google released a tool called bundle tool to help developers in this regard. BundleTool is a jar file (requires Java8 or higher) that can be downloaded from [here](https://github.com/google/bundletool/releases). After downloading the jar, create an alias (in Linux or MAC) as follows in bashrc. \n\n```\nalias bundletool=\"java -jar BUNDLE_TOOL_JAR_PATH\"\n```\n\nExample command to generate apk file:\n```\n bundletool build-apks --bundle=\"./people_wavemaker(0.0.1).debug.aab\" --output=\"./people_from_aab.apks\"\n```\n\n\nExample command to install apk on a connected device\n```\nbundletool install-apks --apks=\"./people_from_aab.apks\"\n```\n\nFor more commands supported by bundletool, check this [link](https://developer.android.com/studio/command-line/bundletool).\n\n\n## wm-cordova-cli breaking change\n\nPreviously, **packageType** is an argument in the build command to specify the type of build (development or production). This argument is renamed to **buildType** in 2.0.0. Now, **packageType** is used to specify the type of package. For Android build, options available under packageType are **bundle** (for aab) and **apk**. Since, ipa is the only format available for ios apps, there is no **packageType** option for ios build.\n\n## Changes in AppChef\n\nIn the build step of creating a new cordova build, a new dropdown is introduced to capture User's choice of Android Package. This dropdown is only visible when a ceretificate for Android build is selected. This dropdown has only two options (aab and apk). If the build type is **development**, then Android package is set as **apk**. If the build type is **production**, then Android package is set as **aab**. Users can override the default behaviour with their choice.\n\n![aab support in Appchef](/learn/assets/aab_support_in_appchef.png)\n\n\n## Google Anouncement\nStarting from August 1st 2021, Google Play Store will allow only new app submissions in **aab** format. Check the Google Anouncement [here](https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html)."
    },
    {
      "id": "/2021/06/24/faster-database-imports-in-studio",
      "metadata": {
        "permalink": "/learn/blog/2021/06/24/faster-database-imports-in-studio",
        "source": "@site/blog/2021-06-24-faster-database-imports-in-studio.md",
        "title": "WaveMaker Studio enables faster database imports",
        "description": "WaveMaker platform offers the feature for applications to integrate with external databases like MySQL, SQLServer, Oracle, IBM DB2, PostgreSQL, Amazon Redshift, SAP HANA.",
        "date": "2021-06-24T00:00:00.000Z",
        "formattedDate": "June 24, 2021",
        "tags": [],
        "readingTime": 2.105,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Sanjana Raheja"
          }
        ],
        "frontMatter": {
          "title": "WaveMaker Studio enables faster database imports",
          "author": "Sanjana Raheja"
        },
        "prevItem": {
          "title": "Generating .aab files using wm-cordova-cli or AppChef",
          "permalink": "/learn/blog/2021/07/19/aab-support"
        },
        "nextItem": {
          "title": "Redshift Database Integration",
          "permalink": "/learn/blog/2021/06/18/redshift"
        }
      },
      "content": "WaveMaker platform offers the feature for applications to integrate with external databases like MySQL, SQLServer, Oracle, IBM DB2, PostgreSQL, Amazon Redshift, SAP HANA.\n \nThese database import flows have now been optimised to enable faster database imports in the application. Let's have a look ahead on how this was done and how would this affect the app developers.\n\n<!-- truncate -->\n\n\n### How did we enable faster database imports in Studio?\n\nWhen a database is imported into an application, the schema is read to discover relationships between the tables and individual table schema as well. Armed with this information, WaveMaker generates REST API and creates hibernate entities for each of tables in the database.\n\nLike mentioned, during this import operation, to read the schema information and relationships metadata for the tables, there are a set of metadata queries for each respective database type, that are run in background on the system tables in the database. \nThese metadata queries have now been fine tuned across all database types, keeping in accordance with the query standards listed for high performing queries.\n\n### How were the queries optimised?\n\nBelow is a short insight about the approaches taken to fine tune the queries for better loading times:\n* Nested select queries were avoided\n* Avoided iterating through the same resultset due to join operation\n* Used left outer joins instead of general joins or where clauses\n* Select field instead of select * from system tables\n* Used WHERE instead of HAVING to define filters\n\n\n### How does it impact the Studio developer?\n\nAs a result of this enhancement, the WaveMaker developer will have a better experience when working with databases while building the application. \nThe import/re-import operations of database in the application will be quicker than the earlier times.\n\nFrom the tests we did, the some of the queries used in database import operation are 600x faster. \nAs a result, the time taken for the entire process of code generation for database entities during database import operation and the respective API generation powered by WaveMaker, is almost cut by half approximately.\n\nNote: The performance improvement ratio is proportional to the number of constraints and relations defined for the tables in the database. \n\nBased on the statistics generated at our end during the QA phase, the metadata for a database with around 800+ tables and heavy constraints for the entities was read in less than 4 seconds due to the optimised metadata queries. \n\nDo try out our database import feature and let us know your feedback."
    },
    {
      "id": "/2021/06/18/redshift",
      "metadata": {
        "permalink": "/learn/blog/2021/06/18/redshift",
        "source": "@site/blog/2021-06-18-redshift.md",
        "title": "Redshift Database Integration",
        "description": "WaveMaker supports Redshift architecture to develop WaveMaker apps by importing the Redshift database into the Studio. You can customize tables and perform queries like any other databases supported by WaveMaker to present data in the UI.",
        "date": "2021-06-18T00:00:00.000Z",
        "formattedDate": "June 18, 2021",
        "tags": [],
        "readingTime": 3.155,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Praveen Chandra"
          }
        ],
        "frontMatter": {
          "title": "Redshift Database Integration",
          "author": "Praveen Chandra"
        },
        "prevItem": {
          "title": "WaveMaker Studio enables faster database imports",
          "permalink": "/learn/blog/2021/06/24/faster-database-imports-in-studio"
        },
        "nextItem": {
          "title": "Integrate SAP HANA Database with WaveMaker",
          "permalink": "/learn/blog/2021/06/18/sap-hana"
        }
      },
      "content": "WaveMaker supports Redshift architecture to develop WaveMaker apps by importing the Redshift database into the Studio. You can customize tables and perform queries like any other databases supported by WaveMaker to present data in the UI.\n\n<!-- truncate -->\n\n## How Redshift Architecture Works\n\nAmazon Redshift is a fully managed, petabyte-scale data warehouse service in the cloud. You can start with just a few hundred gigabytes of data and scale to a petabyte or more.\n\nAmazon Redshift achieves efficient storage and optimum query performance through a combination of massively parallel processing, columnar data storage, and very efficient, targeted data compression encoding schemes.\n\n![Redshift Architecture](/learn/assets/redshift-architecture.png)\n\nRedshift is a data warehouse cluster which is a combination of nodes. If a cluster has two or more clusters then an additional leader node exists which coordinates between the nodes and handles external communication. Each compute node has its own dedicated CPU, memory, and attached disk storage, which are determined by the node type. \n\nA compute node is partitioned into slices. Each slice is allocated a portion of the node's memory and disk space, where it processes a portion of the workload assigned to the node. The leader node manages distributing data to the slices and apportions the workload for any queries or other database operations to the slices. The slices then work in parallel to complete the operation.\n\n## Redshift in WaveMaker\n\nFrom [version 10.7.0](/learn/wavemaker-release-notes/v10-7-0#support-for-red-shift-database), WaveMaker has extended its support to allow a dedicated section for the Redshift database. \n\nIf you have been working with the Redshift database earlier, which allowed importing as read-only mode, you can now import a Redshift database with read and editable modes. Further, you can customize Redshift tables in the database designer. Perform queries and create variables to compose data that you can incorporate into the UI to display devised data in Charts, List, Data Table, and more.\n\n### Connecting to Database\n\nUsing the **Connect to DB** option allows you to import the Redshift database from the **Databases** menu. WaveMaker takes care of adding the driver dependency in `pom.xml`. \n\nFor instance, in the following image, consider an employee table was imported into the project.\n\n![Redshift Table Options](/learn/assets/redshift-table-options.png)\n\nBy importing Redshift tables in editable mode, you can create new tables and modify existing tables from the database designer directly in WaveMaker instead of using the Redshift DB console.\n\nUsing the above table, you can create List, Data Table widgets, etc., and perform CRUD operations on it.\n\n### Querying Redshift Database in WaveMaker\n\nFrom the Query Editor in the Databases menu, you can run all types of queries and procedures and save them, which you can use to create variables and bind them to the widgets. \n\nThe queries can also have parameters that you can dynamically pass during runtime. Below is an example query of the Employee table that has `employeeId` as a parameter. For more information, see [Working with Queries in WaveMaker](/learn/app-development/services/database-services/working-with-queries).\n\n![Redshift Query](/learn/assets/redshift-queries.png)\n\n### Using Redshift DB for Creating a List Widget\n\nDrag and drop a List widget and configure the List widget by selecting the same employee table discussed in the earlier points.\n\n![Redshift Configure List](/learn/assets/redshift-configure-list.png)\n\nAfter configuring the widget, you can preview the application and view the table data as a list.\n\n### Already using a Redshift database?\n\nImport the Redshift database by following the how-to’s doc [Connect To AWS Redshift Database](/learn/how-tos/configuring-aws-redshiftdb).\n\n### In case you don't\n\nBelow are the steps to get you started to launch a Redshift cluster:\n\n1. Sign in to AWS Management Console. Use the following link to open Amazon Redshift console − https://console.aws.amazon.com/redshift/\n2. Create a Cluster and select the number of nodes, node capacity, and other database configurations.\n3. After the cluster creation, you can get the hostname, port, JDBC connection string from the cluster console. Use them to import into WaveMaker."
    },
    {
      "id": "/2021/06/18/sap-hana",
      "metadata": {
        "permalink": "/learn/blog/2021/06/18/sap-hana",
        "source": "@site/blog/2021-06-18-sap-hana.md",
        "title": "Integrate SAP HANA Database with WaveMaker",
        "description": "With constantly changing business needs, WaveMaker puts forward a seamless integration with the SAP HANA database. Develop personalized, intelligent solutions and customer experiences end to end by enabling CRUD (Create, Read, Update and Delete) operations across WaveMaker applications.",
        "date": "2021-06-18T00:00:00.000Z",
        "formattedDate": "June 18, 2021",
        "tags": [],
        "readingTime": 2.35,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Praveen Chandra"
          }
        ],
        "frontMatter": {
          "title": "Integrate SAP HANA Database with WaveMaker",
          "author": "Praveen Chandra"
        },
        "prevItem": {
          "title": "Redshift Database Integration",
          "permalink": "/learn/blog/2021/06/18/redshift"
        },
        "nextItem": {
          "title": "Important Announcement about Changes to Documentation Domain",
          "permalink": "/learn/blog/2021/06/15/announcement-documentation-hostname-update"
        }
      },
      "content": "With constantly changing business needs, WaveMaker puts forward a seamless integration with the SAP HANA database. Develop personalized, intelligent solutions and customer experiences end to end by enabling CRUD (Create, Read, Update and Delete) operations across WaveMaker applications. \n\n<!-- truncate -->\n\n## SAP HANA Database\n\nSAP HANA Cloud is a fully managed in-memory and column-based cloud Database as a Service (DBaaS) offered by SAP that helps in managing your data storage and integration while running powerful applications.\n\nIn SAP HANA, the data is completely stored in the main memory. When the main memory limit is reached, the whole database objects, including table, view, etc., that are not used will be unloaded from the main memory and saved into the disk. For example, in a column store table, data is stored vertically. So, similar data types come together, which provides faster memory read and write operations with the help of the In-Memory Computing Engine.\n\n## SAP HANA in WaveMaker\n\nEarlier, you could import and integrate the SAP HANA database with WaveMaker applications. However, when importing a SAP HANA database using the **Other** option, you could get read-only mode. \n\nWith release 10.7.0, WaveMaker supports read and editable modes with a dedicated section for SAP HANA. Hence, with this upgrade, you can create variables with CRUD functionality to develop List, Data Table, and develop an application using more such widgets within a few clicks.\n\n### Connecting to Database\n\nUsing the **Connect to DB** option allows you to import the SAP HANA database from the **Databases** menu. WaveMaker takes care of adding the driver dependency in `pom.xml`. \n\nFor instance, in the following image, consider an employee table was imported into the project.\n\n![SAP HANA Design](/learn/assets/sap-design-page.png)\n\nUsing the above table, you can create List, Data Table widgets, etc., and perform CRUD operations.\n\n### Using SAP HANA DB for Creating a List Widget\n\nDrag and drop the List widget and configure the List widget by selecting the same employee table discussed in the earlier points.\n\n![SAP HANA Configure List](/learn/assets/sap-configure-list.png)\n\nAfter configuring the widget, you can preview the application and view the table data as a list.\n\n![SAP HANA List Widget](/learn/assets/sap-list-widget.png)\n\n### Editing Tables\n\nWhen you import SAP HANA tables in editable mode, you can create new tables and modify existing tables from the database designer in WaveMaker instead of using the SAP HANA console.\n\n![SAP HANA Table Options](/learn/assets/sap-table-options.png)\n\n### Already have a SAP HANA Database?\n\nImport the SAP HANA database by following the how-to’s doc [Connect To SAP HANA Database](/learn/how-tos/configuring-sap-hana-clouddb).\n\n### In case you don't\n\nThe following steps help you to launch the SAP HANA instance: \n\n1. Sign in to SAP HANA cloud central console.\n2. Launch an SAP HANA instance with the required memory and other database configurations.\n3. After the instance creation, you can get the hostname, port from the SAP HANA database explorer."
    },
    {
      "id": "/2021/06/15/announcement-documentation-hostname-update",
      "metadata": {
        "permalink": "/learn/blog/2021/06/15/announcement-documentation-hostname-update",
        "source": "@site/blog/2021-06-15-announcement-documentation-hostname-update.md",
        "title": "Important Announcement about Changes to Documentation Domain",
        "description": "docs hostname announcement",
        "date": "2021-06-15T00:00:00.000Z",
        "formattedDate": "June 15, 2021",
        "tags": [],
        "readingTime": 0.725,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "Important Announcement about Changes to Documentation Domain",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Integrate SAP HANA Database with WaveMaker",
          "permalink": "/learn/blog/2021/06/18/sap-hana"
        },
        "nextItem": {
          "title": "WaveMaker Releases 10.7 Version",
          "permalink": "/learn/blog/2021/05/09/product-update-10-7-whats-new"
        }
      },
      "content": "![docs hostname announcement](/learn/assets/docs-hostname.jpg)\n\n<!-- truncate -->\n\nAs a part of brand unification, our digital team has been working hard to create a better online experience for our customers. For this reason, we are moving to a new domain for WaveMaker Documentation.\n\nStarting June 21, 2021, our new domain for Documentation will be **[docs.wavemaker.com/learn](https://docs.wavemaker.com/learn/)**. \n\n### RSS Feed\n\nIf you have subscribed to our Team Blog via RSS feed, we request you to update the feed URL to continue to receive news and updates from our Engineering team.\n\n#### Updated URL\n\n```\nhttps://docs.wavemaker.com/learn/blog/feed.xml\n```\n\nAlternatively, find the updated URL when you navigate to **[blogs](/learn/blog)** as well, as shown below.\n\n![rss feed](/learn/assets/rss-update.png)\n\nThough there are no other significant changes in the layout and context, we have made it just a little easier for our customers and clients to find us online and convey a more cohesive brand identity."
    },
    {
      "id": "/2021/05/09/product-update-10-7-whats-new",
      "metadata": {
        "permalink": "/learn/blog/2021/05/09/product-update-10-7-whats-new",
        "source": "@site/blog/2021-05-09-product-update-10-7-whats-new.md",
        "title": "WaveMaker Releases 10.7 Version",
        "description": "WaveMaker releases the 10.7.0 update on 09 May 2021. For the detailed list of features and fixes, see WaveMaker release notes 10.7.0.",
        "date": "2021-05-09T00:00:00.000Z",
        "formattedDate": "May 9, 2021",
        "tags": [],
        "readingTime": 2.025,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "WaveMaker Releases 10.7 Version",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Important Announcement about Changes to Documentation Domain",
          "permalink": "/learn/blog/2021/06/15/announcement-documentation-hostname-update"
        },
        "nextItem": {
          "title": "Theme Builder with some coding (Build + Edit)",
          "permalink": "/learn/blog/2021/04/19/Build-theme-and-edit"
        }
      },
      "content": "WaveMaker releases the **10.7.0 update** on 09 May 2021. For the detailed list of features and fixes, see [WaveMaker release notes 10.7.0](/learn/wavemaker-release-notes/v10-7-0).\n\nTake a peek into what's new in this release. \n\n<!-- truncate -->\n\n## What's New\n\n- **[Working in branches](/learn/wavemaker-release-notes/v10-7-0#work-in-branches)** offers the standard SDLC workflow for making fixes on already released version of your WaveMaker aoo while rest of the team continues sprinting on the next release. You can now create a branch for the released version of the app and make your hotfix on that branch from within WaveMaker. This feature is available in our \"Teams\" offering. \n\n\n- While support for branching requires enhancements to **[how VCS operates](/learn/wavemaker-release-notes/v10-7-0#vcs-enhancements)**, including how you manage projects, groups, and organizations. See how these changes your [current workflow](/learn/wavemaker-release-notes/v10-7-0#vcs-enhancements) if you are a member of WMO Teams.\n\n\n- Are you already a part of the Amazon ecosystem? In that case, we have good news for you. With the **[support of the Redshift database](/learn/wavemaker-release-notes/v10-7-0#support-for-red-shift-database)** in WaveMaker, get speedy, high performance, horizontally scalable, with the ability to add massive capacity storage—all in the cloud using clustering model.\n\n\n- Are you using **[SAP HANA](/learn/wavemaker-release-notes/v10-7-0#support-for-sap-hana-database)** in your SAP modules? With SAP HANA implementation in WaveMaker, import the SAP HANA database into your WaveMaker application for seamless integration, supporting the columnar data model. It improves flexibility, performance and uses an in-memory store with the read and editable modes.\n\n- Limitations to access public servers apply to most organizations. We understand. All the essential **[UI Artifacts](/learn/wavemaker-release-notes/v10-7-0#ui-artifacts-now-published-to-npm)**  to generate and build an Angular app are published to the npm central repository. Incorporate UI Artifacts and simplify your CI-CD pipeline using the standard npm repo without worrying about firewall restrictions safely.\n\n- In the times before world changed, and you could go grocery shopping, you knew where to find the items you need as they are neatly classified into categories. A new property called **[Groupby](/learn/wavemaker-release-notes/v10-7-0#other-improvements)** helps you group and classify data to arrange things systematically. We introduced this property within several widgets, including Select, Search, Chip, Radioset, and Autocomplete. \n\n## Improvements and Bug Fixes \n\nIn addition to new features, improving the existing ones is just as important. We fixed some critical bug fixes and enhanced several features. See the full list of [bug fixes here](/learn/wavemaker-release-notes/v10-7-0/#bug-fixes) and [enhancements here](/learn/wavemaker-release-notes/v10-7-0#other-improvements).\n\nDo you have a great idea of what you'd like to see next? Let us know [here](mailto:info@wavemaker.com).\n\n## See Also\n\n[Release Notes 10.6](/learn/wavemaker-release-notes/v10-6-0/)  \n[Release Notes 10.5](/learn/wavemaker-release-notes/v10-5-0/)  \n[Release Notes 10.4](/learn/wavemaker-release-notes/v10-4-0/)"
    },
    {
      "id": "/2021/04/19/Build-theme-and-edit",
      "metadata": {
        "permalink": "/learn/blog/2021/04/19/Build-theme-and-edit",
        "source": "@site/blog/2021-04-19-Build-theme-and-edit.md",
        "title": "Theme Builder with some coding (Build + Edit)",
        "description": "Theme builder app is expanding its capability of creating a theme with an Edit feature to customize advanced changes. This feature will extend the ability to develop themes beyond the basics and add more advanced styling based on projects. This will also help to preview applied changes and test the theme's overall look and feel.",
        "date": "2021-04-19T00:00:00.000Z",
        "formattedDate": "April 19, 2021",
        "tags": [],
        "readingTime": 3.285,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Lovin Ahmed"
          }
        ],
        "frontMatter": {
          "title": "Theme Builder with some coding (Build + Edit)",
          "author": "Lovin Ahmed"
        },
        "prevItem": {
          "title": "WaveMaker Releases 10.7 Version",
          "permalink": "/learn/blog/2021/05/09/product-update-10-7-whats-new"
        },
        "nextItem": {
          "title": "Understanding Scaling of WaveMaker Applications",
          "permalink": "/learn/blog/2021/01/04/spring-session-persistence"
        }
      },
      "content": "[Theme builder](https://apps.wavemakeronline.com/Theme_Builder/#/Dashboard) app is expanding its capability of creating a theme with an Edit feature to customize advanced changes. This feature will extend the ability to develop themes beyond the basics and add more advanced styling based on projects. This will also help to preview applied changes and test the theme's overall look and feel.\n\n\n<!-- truncate -->\n\n## Why?\n\nOver time, we have seen that though the theme builder tool was efficient to kick start with branding changes, it lacked in the styling details of what each project needs. There was a need to handle the advanced styles with an option to view the changes. We understand that only coding without preview is baseless, So here is the solution to those problems that every developer faces. \n\nWith the new enhancement to the theme builder tool, We have introduced a new code editing option to create themes more efficiently. The new feature will help develop a full-fledged theme with the branding configuration and advanced modifications as per project requirments.\n\n\n![Code editor Button](/learn/assets/code-editor-button.png)\n\n\n## How does it work?\n\n[Theme editor](https://apps.wavemakeronline.com/Theme_Builder/#/Editor) will continue the styling configurations till Step 4, followed by a new **\"Code Editor\"** button, which starts a new window to the bottom of the screen. \n\n\n\n### **Steps to follow:**\n\n* Click next to continue the initial flow till Step 4.\n* Click on the code editor button to the left corner in the footer. \n* A code panel will popup to the bottom, with the preview application vertically sectioned. \n* Explore the capabilities like Add, Override, and Modify based on the needs of each project and save the file. \n\n:::note\nAll the changes will reflect in the preview application only when clicked on save button. \n:::\n\n\n* Checked your changes and repeat the steps to style more.\n* Bring the focus to the editing lines and try **Ctrl F** to search for classnames whenever required. \n* Close the editor to go back to the branding changes anytime and choose \"Okay\" to override the progressive changes made.\n\n\n![Code editor window](/learn/assets/code-editor-window.png)\n\n![Code editor override](/learn/assets/code-editor-override.png)\n\n* When ready, download the theme and import to the projects.\n\n:::note\nFor information on how to import a theme, see [Importing Theme](/learn/app-development/ui-design/themes#import-theme).\n:::\n\n\n\n## Editor's tips and tricks\n\nWe will share few easy way tips to help you get faster and more productive while editing the theme file. \n\n* The editable file is in .less format. Hence, the changes should start inside the class name parenthesis **.wm-app{ }**.\n* The code editing starts from the 11th line from .wm-app{ }. The lines above are not editable due to complications with the respective path.\n* With every change, saving the file is mandatory to reflect the changes in the preview application\n* The **CtrlF** function will work when focused on the editable lines.\n* **CtrlZ** function will revert your changes to the initial state. \n* To override the styles, search for the class name and address applicable changes.\n* If theme selected is **flat** or **gradient**, The classnames might duplicate for overriding purpose. Search and modify accordingly.\n\n:::warning\nOrder of precedence for code edited will be last come first to apply.\n:::\n\n* Add proper comments for every piece of code rewritten in the file.\n\n\n\n## Bug Fixes\n\n1. Added more screens in the preview application with all the WaveMaker components to test the theme styles.\n2. Checkboxes and radio button borders were half cut when set the font size to 10px or 11px. Fixed now\n3. When the secondary button is focused, the text changes to primary color instead of active contrast color. Fixed now.\n4. Changed the build settings of the preview application to load the assets faster.\n5. Fixed the alignment issue for the select widget down arrow when the gradient theme is selected and imported to projects.\n6. Dynamic form labels were not vertically aligned when selected a flat theme or gradient theme. Fixed now.\n\n\n\n\nWill be back with more updates."
    },
    {
      "id": "/2021/01/04/spring-session-persistence",
      "metadata": {
        "permalink": "/learn/blog/2021/01/04/spring-session-persistence",
        "source": "@site/blog/2021-01-04-spring-session-persistence.md",
        "title": "Understanding Scaling of WaveMaker Applications",
        "description": "You have developed an exceptional application, and the demand for your application is increasing. You need to expand its accessibility and develop a plan to scale your application. Understanding how to scale an application means ensuring that your application can handle a larger number of users simultaneously. WaveMaker generates code based on open standards and brings best practices to the way applications should be architected. This makes scaling the application easy to understand and apply.",
        "date": "2021-01-04T00:00:00.000Z",
        "formattedDate": "January 4, 2021",
        "tags": [],
        "readingTime": 4.115,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "Understanding Scaling of WaveMaker Applications",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Theme Builder with some coding (Build + Edit)",
          "permalink": "/learn/blog/2021/04/19/Build-theme-and-edit"
        },
        "nextItem": {
          "title": "Automatically Import your Website Branding Styles into a Theme",
          "permalink": "/learn/blog/2020/12/18/generate-color-palette-from-url"
        }
      },
      "content": "You have developed an exceptional application, and the demand for your application is increasing. You need to expand its accessibility and develop a plan to scale your application. Understanding how to scale an application means ensuring that your application can handle a larger number of users simultaneously. WaveMaker generates code based on open standards and brings best practices to the way applications should be architected. This makes scaling the application easy to understand and apply.\n\nWhat happens if you don't scale your application?\n\nIt is the point when an application can no longer handle additional requests effectively that will limit its scalability. This limit is reached when the resources run out, requiring more machines or more capacity.\n\nIn this article, learn about scaling approaches and how WaveMaker scales an application.\n\n<!-- truncate -->\n\n## Understanding Scaling Approaches\n\nFollowing are the two approaches for scaling an application.\n\n1. Vertical Scaling\n2. Horizontal Scaling\n\n### Vertical Scaling\n\nIn simple terms, Vertical scaling means adding more resources to the server, for example, increasing the capacity of the CPU, RAM, and DISK space in a single machine to \"scale-up\". Vertical scaling is limited to the capacity of a single machine, therefore, scaling beyond that capacity often involves downtime when switching from a small machine to a bigger machine.\n\n### Horizontal Scaling\n\nHorizontal scaling means it scales an application by adding more machines into the pool across the horizontal direction to \"scale-out\", and the scaling is based on partitioning the data. It replicates the application by growing the number of [nodes in the cluster](https://www.onixnet.com/insights/kubernetes-101-what-are-nodes-and-clusters#:~:text=Every%20cluster%20has%20one%20master,to%20be%20a%20single%20system.). Also, distributing the responsibilities of each node and providing additional end-points for client connections. \n\n### Which one is better for your application?\n\nThe decision depends on a number of factors, including the following.\n\n1. Is the application request volume steadily growing?\n2. Is the application's current growth experiencing [spikes](https://www.techopedia.com/definition/33767/spike-testing) that lead to service degradation?\n\nCombine these factors with the application's unique requirement to evaluate and determine the optimal scaling approach.\n\nHowever, when you compare both Vertical and Horizontal approaches, Horizontal scaling offers a benefit of elasticity. Instead of taking your server down while you are scaling up to a better one, you keep your existing pool of resources online while adding more to what you already have. By adding more machines to the existing pool, you are not limited to the capacity of a single machine, and that scales your application with almost no downtime, and you do not get caught into the resource-shortfall.\n\n## WaveMaker's approach for Scaling Applications\n\nAlthough horizontal scaling is the desirable approach for scaling an application, there are still a few challenges that need to be addressed. Let's understand that first.\n\n### How data partition can be a challenge in Horizontal scaling\n\nThe following image shows a deployment architecture of Horizontal scaling.\n\n![Horizontal Scaling Deployment Architecture](/learn/assets/horizontal-scaling.png)\n\nWith Horizontal scaling, the data gets distributed among the nodes, and each node contains only a part of the data. Therefore, the user-session created by a node cannot be understood by the other node. In this case, when the user logins again, it rejects the request if the request goes to another node.\n\nWaveMaker generates open standards code based on Spring for the back end. So, for Horizontal scaling, [Spring Session Module](https://spring.io/projects/spring-session) implementation can be used, configured to handle session management for the application.\n\n### Integrating Spring Session with WaveMaker\n\nSpring Session manages user's http session information while supporting clustered sessions without being tied to an application container specific solution.\n\nIn the following illustration, see how WaveMaker applications scale horizontally; specifically, storing user authenticated sessions when the requests are served by different nodes using the round-robin mechanism and without using any sticky sessions.\n\n#### Distributed Persistence of User Authentication Session Architecture\n\n![Distributed Persistence of User Authentication Session](/learn/assets/session-persistence.png)\n\nFor this approach, WaveMaker uses `spring-session-core` as a runtime dependency. It distributes the persistence of the user authentication session. With a distributed session registry, the user session created by a node can be understood by the other nodes by persisting the user sessions in a distributed manner.\n\n### Spring-session based on External Store\n\nThere are two ways for configuring external session stores depending on your requirements by choosing from Redis and JDBC. To configure with Redis as an external store, WaveMaker adds `spring-session-data-redis` along with `lettuce-core` dependency. Similarly, for JDBC, we add a `spring-session-jdbc` dependency. WaveMaker internally adds these dependencies to scale applications and handle session management for the application.\n\nWith [release 10.6](/learn/wavemaker-release-notes/v10-6-0), all the WaveMaker applications provide an option to opt for Horizontal scaling by choosing from Redis, JDBC, along with `MapSessionRepository` as a Distributed Session Registry.\n\n![Session Persistence with Horizontal Scaling](/learn/assets/session-persistence-horizontal-scaling.png)\n\n`MapSessionRepository` is an [In-memory](/learn/app-development/app-security/session-persistence#in-memory) type that does not scale the application horizontally, and it is the default settings when you create a WaveMaker application. To enable Horizontal scaling, simply select an option from the dropdown, and follow the on-screen instructions. To learn how to use this feature, see [Horizontal Scaling using Session Persistence](/learn/app-development/app-security/session-persistence#in-memory)."
    },
    {
      "id": "/2020/12/18/generate-color-palette-from-url",
      "metadata": {
        "permalink": "/learn/blog/2020/12/18/generate-color-palette-from-url",
        "source": "@site/blog/2020-12-18-generate-color-palette-from-url.md",
        "title": "Automatically Import your Website Branding Styles into a Theme",
        "description": "Theme Builder app has introduced a new feature for recognizing a website color palette by inserting the website URL. With this, you can discover the colors used in a website and use them to build a theme. It will essentially make the theme-building process much easier by allowing you to choose the discovered colors, fonts, and more from an existing website. Furthermore, you can preview and design WaveMaker components by assigning colors, and download the theme when ready. For more information about creating a theme without any coding, see Creating a Theme using Theme Builder.",
        "date": "2020-12-18T00:00:00.000Z",
        "formattedDate": "December 18, 2020",
        "tags": [],
        "readingTime": 2.335,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Lovin Ahmed"
          }
        ],
        "frontMatter": {
          "title": "Automatically Import your Website Branding Styles into a Theme",
          "author": "Lovin Ahmed"
        },
        "prevItem": {
          "title": "Understanding Scaling of WaveMaker Applications",
          "permalink": "/learn/blog/2021/01/04/spring-session-persistence"
        },
        "nextItem": {
          "title": "Certificate Pinning Case Study",
          "permalink": "/learn/blog/2020/12/15/certificate-pinning"
        }
      },
      "content": "[Theme Builder](https://apps.wavemakeronline.com/Theme_Builder/#/Dashboard) app has introduced a new feature for recognizing a website color palette by inserting the website URL. With this, you can discover the colors used in a website and use them to build a theme. It will essentially make the theme-building process much easier by allowing you to choose the discovered colors, fonts, and more from an existing website. Furthermore, you can preview and design WaveMaker components by assigning colors, and download the theme when ready. For more information about creating a theme without any coding, see [Creating a Theme using Theme Builder](/learn/app-development/ui-design/theme-builder).\n\n<!-- truncate -->\n\nWith WaveMaker 10.6 release, we have fixed a few bugs. [Know more details here](/learn/wavemaker-release-notes/v10-6-0).\n\n## Input URL\n\n***New feature Step-2 unlocked for Generating Theme Colors***\n\nIntroduced a new flow to identify the colors of a website using the **Input URL** option. Follow the steps below to use this feature.\n\n1. Go to the Dashboard page of the [Theme builder](https://apps.wavemakeronline.com/Theme_Builder/#/Dashboard) app.\n2. Click ***Input URL** and generate*.\n\n![theme builder dashboard tile2](/learn/assets/theme-builder-dashboard-tile2.png)\n\n3. Enter a website URL. For example, `https://www.google.com/`, and click **Search URL** to generate the color palette of the website.\n\n![theme builder import theme](/learn/assets/theme-builder-import-theme.png)\n\n4. A prompting message displays on the **Editor** page with the generated colors with a maximum of six colors that are highlighted. However, the preview application continues to use the default colors of the existing Material theme.\n\n\n![theme builder color list](/learn/assets/theme-builder-dynamic-color-list.png)\n\n5. You can design WaveMaker components with the new colors and preview them right away.\n\n:::note\nThe generated colors are available for all the input fields. Choose the colors from the dropdown as per your branding needs.\n:::\n\n6. When ready, download the theme.\n\n:::note\nFor information on how to import a theme, see [Importing Theme](/learn/app-development/ui-design/themes#import-theme).\n:::\n\n## Bug Fixes\n\n1. The list widget data is now replaced with the real data in the preview application.\n2. A new page template called `Dashboard1` is newly included for the preview application. You can navigate it from the left navbar.\n3. Added **Panel Secondary** to the preview application to check the color changes for the secondary theme color.\n4. Fixed issue related to gradient background that was not consistent for widgets when previewing the application switching to gradient theme for UI elements, including Nav, List, Panel backgrounds, Checkboxes, and Radio buttons.\n5. Changed the default option for the **Spacing** property in **General Settings** from `default` to `comfortable` to match the default Material-2.0 theme.\n6. Fixed issue related to Border radius panels that were not consistent when changing from none, less, and more.\n7. Fixed the list item active state that did not match the color selected for the gradient theme in the left navigation.\n8. Fixed the state colors that did not reflect the tiles widget.\n\nThat's all for now. See you soon with more updates."
    },
    {
      "id": "/2020/12/15/certificate-pinning",
      "metadata": {
        "permalink": "/learn/blog/2020/12/15/certificate-pinning",
        "source": "@site/blog/2020-12-15-certificate-pinning.md",
        "title": "Certificate Pinning Case Study",
        "description": "A case study on Certificate Pinning.",
        "date": "2020-12-15T00:00:00.000Z",
        "formattedDate": "December 15, 2020",
        "tags": [],
        "readingTime": 2.615,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Radhakrishnan Asokan"
          }
        ],
        "frontMatter": {
          "title": "Certificate Pinning Case Study",
          "author": "Radhakrishnan Asokan"
        },
        "prevItem": {
          "title": "Automatically Import your Website Branding Styles into a Theme",
          "permalink": "/learn/blog/2020/12/18/generate-color-palette-from-url"
        },
        "nextItem": {
          "title": "Cordova 10.0.0 Upgrade ",
          "permalink": "/learn/blog/2020/12/09/cordova-10-0-0-upgrade"
        }
      },
      "content": "A case study on Certificate Pinning.\n\n<!--truncate-->\n\n### Introduction\n\nIn HTTPS handshake, the server responds with a public certificate issued by Certificate Authority (CA) to establish a connection. If CA, or Root certificate was compromised and issues a certificate without the domain owner's consent, the client may face the Man-in-the-middle (MTM) attack. To protect users from this vulnerability, an app can employ SSL pinning.\n\n![MITM](/learn/assets/blog_certificate_pinning/mitmdiagram.png)\n\nCertificate Pinning is an additional layer of security that protects communication between client and server. The Standard HTTPS verifies whether the connection is secure but it cannot verify whether you are communicating with the actual server or an intercepted server.\n\n## What Certificate Pinning offers\n\nStandard HTTPS establishes a secure connection and checks whether the server certificate was issued by a trusted CA. Certificate Pinning additionally forces the client app to validate the server certificate with a known copy of the certificate.\n\nThe client application contains the pinned certificates which are pre-defined \"known\" certificates. During the time of communication between the client and server, the client expects the server certificate to match with any one of the pinned certificates. If it does not match, the client will terminate the connection.\n\n![Certificate Pinning](/learn/assets/blog_certificate_pinning/nomitmdiagram.png)\n\n### Web Certificate Pinning\n\nWeb Certificate Pinning is dynamic pinning. Certificates are pinned during the initial connection establishment. It was [introduced](https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning) in 2015 but was deprecated in 2018 due problems it created than resolving the actual [problem](https://scotthelme.co.uk/using-security-features-to-do-bad-things/).\n\n### Mobile Certificate Pinning\n\nMobile Certificate Pinning is static pinning, in which the certificate is bundled with the app. This means new app has to be installed on the certificate expiry.\n\n## Advantages of Certificate Pinning\n\n* Certificate Pinning protects data tampering even if the user installs a malicious CA with or without knowing.\n* If a trusted certificate authority gets compromised due to security [vulnerability](https://en.wikipedia.org/wiki/Certificate_authority#CA_compromise), the application will not get affected.\n\n## Problem Associated with Certificate Pinning\n\nA security researcher has [warned](https://scotthelme.co.uk/im-giving-up-on-hpkp/) the risk associated with using HTTP Certificate Pinning.\n\n* If the key was accidentally deleted, stolen, hacked, you may face serious application [downtime issues](https://www.smashingmagazine.com/be-afraid-of-public-key-pinning/).\n* Domain hijacking - on Domain-hijacking, you can lose control of certificates, and hijackers can mishandle your certificates.\n\n:::warning\nAfter carefully evaluating, very few sites and apps use Certificate Pinning. The developer should be very careful in evaluating and using this feature. However, at this point, we have not yet implemented support for Certificate Pinning for applications build using WaveMaker.\n:::\n\n## What next?\n\n[Certificate Transparency (CT)](http://www.certificate-transparency.org/what-is-ct) was introduced in 2018 after deprecation of Web Certificate Pinning. CT is an open-source framework for monitoring and auditing certificates. This standard creates a public logger that records all the certificates issued by the trusted CA. You can monitor these loggers to detect mistakenly-issued certificates, compromised CAs, and CAs dishonesty.\n\nCT in [OpenSSL](http://www.certificate-transparency.org/certificate-transparency-in-openssl), whenever a connection is initiated, SSL certificates' timestamp will be used to fetch the certificate from the CT log and compared to establish the connection.\n\n## Conclusion\n\nThough CT is different from Certificate Pinning, it will effectively replace the Certificate Pinning without compromising the quality of service.\n\nHave a great idea for what you'd like to see next? Let us know [here](mailto:info@wavemaker.com)."
    },
    {
      "id": "/2020/12/09/cordova-10-0-0-upgrade",
      "metadata": {
        "permalink": "/learn/blog/2020/12/09/cordova-10-0-0-upgrade",
        "source": "@site/blog/2020-12-09-cordova-10-0-0-upgrade.md",
        "title": "Cordova 10.0.0 Upgrade ",
        "description": "In 10.6.0 release, WaveMaker platform is upgraded to use cordova@10.0.0 and cordova-ios@6.1.0.",
        "date": "2020-12-09T00:00:00.000Z",
        "formattedDate": "December 9, 2020",
        "tags": [],
        "readingTime": 0.375,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Srinivasa Rao Boyina"
          }
        ],
        "frontMatter": {
          "title": "Cordova 10.0.0 Upgrade ",
          "author": "Srinivasa Rao Boyina"
        },
        "prevItem": {
          "title": "Certificate Pinning Case Study",
          "permalink": "/learn/blog/2020/12/15/certificate-pinning"
        },
        "nextItem": {
          "title": "WaveMaker Releases 10.6 Version",
          "permalink": "/learn/blog/2020/12/08/wavemaker-release-10-6-version"
        }
      },
      "content": "In 10.6.0 release, WaveMaker platform is upgraded to use cordova@10.0.0 and cordova-ios@6.1.0.\n\n<!--truncate-->\n\nFollowing plugins are not required for WaveMaker10.6 platform. During the upgradation process, these plugins are removed from config.xml.\n\n1) cordova-plugin-file-transfer\n2) [cordova-plugin-local-webserver](/learn/blog/2020/04/20/wavemaker-wkwebview-upgrade)\n3) cordova-plugin-transport-security\n4) [cordova-plugin-wkwebview-engine](/learn/blog/2020/04/20/wavemaker-wkwebview-upgrade)\n5) cordova-plugin-telerik-imagepicker\n\nWith cordova-ios@6.1.0 upgradation, WaveMaker supports from iOS-12.0 (and above). [As recommended by cordova](https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-splashscreen/#designing-launch-storyboard-images), WaveMaker supports Launch story boards in iOS. Due to that, minimum number of splash images in iOS got reduced to 8."
    },
    {
      "id": "/2020/12/08/wavemaker-release-10-6-version",
      "metadata": {
        "permalink": "/learn/blog/2020/12/08/wavemaker-release-10-6-version",
        "source": "@site/blog/2020-12-08-wavemaker-release-10-6-version.md",
        "title": "WaveMaker Releases 10.6 Version",
        "description": "With WaveMaker 10.6.0 Release on 08 December, 2020, see what’s new, and features that were requested, and reported bugs. To learn about our detailed list of features and fixes, see WaveMaker Release Notes 10.6.0.",
        "date": "2020-12-08T00:00:00.000Z",
        "formattedDate": "December 8, 2020",
        "tags": [],
        "readingTime": 0.97,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "WaveMaker Releases 10.6 Version",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Cordova 10.0.0 Upgrade ",
          "permalink": "/learn/blog/2020/12/09/cordova-10-0-0-upgrade"
        },
        "nextItem": {
          "title": "Retain UI State in WaveMaker Apps",
          "permalink": "/learn/blog/2020/11/09/Retain-UI-State-on-Wavemaker-Apps"
        }
      },
      "content": "With WaveMaker 10.6.0 Release on 08 December, 2020, see what’s new, and features that were requested, and reported bugs. To learn about our detailed list of features and fixes, see [WaveMaker Release Notes 10.6.0](/learn/wavemaker-release-notes/v10-6-0).\n\nHere are some highlights of what's in this release.\n\n<!-- truncate -->\n\n## What's new\n\n1. [Upgraded to Angular 9](/learn/wavemaker-release-notes/v10-6-0#upgraded-to-angular-9)\n\n2. [Spring Session Persistence - uses the spring-session-core library for session management](/learn/wavemaker-release-notes/v10-6-0#spring-session-persistence)\n\n3. [Page Cache - a new flag called Cache is introduced on the Page tag](/learn/wavemaker-release-notes/v10-6-0#page-cache)\n\n4. [Retain State for Widgets - to efficiently save and restore UI state](/learn/wavemaker-release-notes/v10-6-0#retain-state-for-widgets)\n\n5. [Command-Line for Building Cordova Zip - generate Cordova Zip outside WaveMaker Studio](/learn/wavemaker-release-notes/v10-6-0#command-line-for-building-cordova-zip)\n\n6. [Alternative to PhoneGap -  WM-Cordova-CLI](/learn/wavemaker-release-notes/v10-6-0#alternative-to-phonegap)\n\n7. [AppChef App for generating APK and IPA](/learn/wavemaker-release-notes/v10-6-0#appchef)\n\n8. [Public npm Registry](/learn/wavemaker-release-notes/v10-6-0#npm-registry)\n\n9. [Central Maven Repositories](/learn/wavemaker-release-notes/v10-6-0#maven-repositories)\n\n10. [Up-to-date Libraries](/learn/wavemaker-release-notes/v10-6-0#up-to-date-libraries)\n\n11. [Docker Upgrade](/learn/wavemaker-release-notes/v10-6-0#docker-upgrade)\n\n### Bug Fixes \n\nSome of the critical bugs have been fixed in the release. See the list of [bug fixes of WaveMaker 10.6](/learn/wavemaker-release-notes/v10-6-0/#bug-fixes).\n\nAs a modern development team, we are adapting to the latest technology trends. If there is anything you feel WaveMaker should have, do let us know [here](mailto:info@wavemaker.com).\n\n## See Also\n\n[Release Notes 10.5](/learn/wavemaker-release-notes/v10-5-0/)  \n[Release Notes 10.4](/learn/wavemaker-release-notes/v10-4-0/)"
    },
    {
      "id": "/2020/11/09/Retain-UI-State-on-Wavemaker-Apps",
      "metadata": {
        "permalink": "/learn/blog/2020/11/09/Retain-UI-State-on-Wavemaker-Apps",
        "source": "@site/blog/2020-11-09-Retain-UI-State-on-Wavemaker-Apps.md",
        "title": "Retain UI State in WaveMaker Apps",
        "description": "A Wavemaker Application typically comprises of many pages, and each page consists of various widgets. When certain actions are performed on the page, it results in changes to the state of the application. Some of the examples are:",
        "date": "2020-11-09T00:00:00.000Z",
        "formattedDate": "November 9, 2020",
        "tags": [],
        "readingTime": 3.11,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Nikhilesh K V"
          }
        ],
        "frontMatter": {
          "title": "Retain UI State in WaveMaker Apps",
          "author": "Nikhilesh K V"
        },
        "prevItem": {
          "title": "WaveMaker Releases 10.6 Version",
          "permalink": "/learn/blog/2020/12/08/wavemaker-release-10-6-version"
        },
        "nextItem": {
          "title": "Theme builder is ready with a new update",
          "permalink": "/learn/blog/2020/07/03/Another-update-to-theme-builder"
        }
      },
      "content": "A Wavemaker Application typically comprises of many pages, and each page consists of various widgets. When certain actions are performed on the page, it results in changes to the state of the application. Some of the examples are:\n* Switching between different tab panes in a Tabs widget.\n* Switching between different accordion panes in an Accordion widget.\n* Selecting items in a List widget and navigating between different pages of the List(pagination).\n* Searching, Sorting, Row Selection, and Pagination in a Data Table widget.\n\n<!--truncate-->\n\n## Problem\n\nWhen any of the the above actions are performed in a page and the User navigates to another page, on navigating back to the previous page using Browser back button, the previous state is lost. All widgets of the page go back to their initial states. There should be a way to retain the state such that even when the user refreshes the page or shares the URL with someone else, they land on the page at a particular state.\n\n\n## Solution\n\nRetain State feature is coming to the rescue in Wavemaker 10.6 release! The actions performed above can be retained in the URL, Local Storage or Session Storage. A **Behavior** property called **Retain State** has been exposed for the supported widgets. This gives us the flexibility to be able to choose different State retention mechanisms for different widgets as and when required.\n\nA sample URL with state information(provided that URL was chosen as Retain state mechanism) is shown below.\n```\nhttps://local-studio.wavemaker.com/run-jm4351st8w/StatePersistenceApp_master/#/Main?wm_state=('ws'~('RepsTable1'~('search'~!('field'~'city'_'value'~'New'_'matchMode'~'anywhereignorecase'_'type'~'string')*_'sort'~('direction'~'asc'_'field'~'name'))))\n```\nA reserved query param called **wm_state** is appended to the URL which contains the state information.\n\n## Supported Widgets\nAs of 10.6 release, out of the box support has been provided for Tabs, Accordions, Lists and Data Tables. Support for other widgets will be incrementally added in the future releases. However, the below methods have been provided so that Users can retain state for other Widgets/Variables as well.\n\n## DSL API\nThe below DSL methods have been exposed to cater to the custom use cases which a User can have. \nMode is an optional parameter which can be passed for Widgets which don't support state retention by default. If no value is passed then mode will be defaulted to 'URL'.\n\n1. ### setWidgetState(widget, value, mode?)\nSets the passed value to the state information by using the passed widget instance. \nExample:\n\nOn changing a text box value, we want to add a state param in the url.\n```\nPage.text1Change = function($event, widget, newVal, oldVal) {\n    var stateService = App.getDependency('StatePersistenceService');\n    stateService.setWidgetState(Page.Widgets.text1, {\n        textValue: newVal\n    });\n};\n```\n2. ### getWidgetState(widget, mode?)\nWill return the value set against the passed widget. This will be called on page load (typically in onPageReady). Based on the value returned, operations can be performed.\n\nExample:\n```\nPage.onReady = function() {\n    var stateService = App.getDependency('StatePersistenceService');\n    var widgetState = stateService.getWidgetState(Page.Widgets.text1);\n    if (widgetState && widgetState.textValue) {\n        Page.Widgets.text1.datavalue = widgetState.textValue;\n    }\n};\n```\n\n3. ### removeWidgetState(widget, key?, mode?)\nRemoves the passed widget’s state information from the State Object. If a key is passed, then only that particular entry will be removed, not any other entries for that widget.\n\n\nExample:\n```\n//Initial State: widget_state = {“TextBox1”: {“textValue”: “Hi”, “numberOfKeypresses”: “5” }};\nstateService.removeWidgetState(Page.Widgets.text1);\n//Updated State: widget_state = {};\n```\n\n4. ### setStateVariable(variableName, value, mode?)\nSets the passed value to the state information by using the passed variable name as key.\n\nExample:\n```\nstateService.setStateVariable('Variable1', {\n    numberOfTimesInvoked': 2\n});\n```\n5. ### getStateVariable(variableName, mode?)\nChecks if the passed variable name has any state information available in the url or not.\n\nExample:\n```\nstateService.getStateVariable('Variable1');\n```\n\n6. ### removeStateVariable(variableName, mode?)\nRemoves the passed variable’s state information from the URL.\n\nExample:\n```\n//Initial State: variable_state = {“Variable1”: {“textValue”: “Hi”, “numberOfKeypresses”: “5” }};\nstateService.removeStateVariable(“Variable1”);\n//Updated State: widget_state = {};\n```"
    },
    {
      "id": "/2020/07/03/Another-update-to-theme-builder",
      "metadata": {
        "permalink": "/learn/blog/2020/07/03/Another-update-to-theme-builder",
        "source": "@site/blog/2020-07-03-Another-update-to-theme-builder.md",
        "title": "Theme builder is ready with a new update",
        "description": "Here is another update on the Theme builder app. After the first release of theme builder, we thought of adding few more features and enhancements to enable our users to create great themes to get their web, mobile applications looking well finished.",
        "date": "2020-07-03T00:00:00.000Z",
        "formattedDate": "July 3, 2020",
        "tags": [],
        "readingTime": 2.08,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Lovin Ahmed"
          }
        ],
        "frontMatter": {
          "title": "Theme builder is ready with a new update",
          "author": "Lovin Ahmed"
        },
        "prevItem": {
          "title": "Retain UI State in WaveMaker Apps",
          "permalink": "/learn/blog/2020/11/09/Retain-UI-State-on-Wavemaker-Apps"
        },
        "nextItem": {
          "title": "PostgREST OpenAPI support in WaveMaker",
          "permalink": "/learn/blog/2020/07/01/wavemaker-openapi-postgrest-support"
        }
      },
      "content": "Here is another update on the [Theme builder](https://apps.wavemakeronline.com/Theme_Builder/#/Dashboard) app. After the [first release](/learn/blog/2020/06/01/build-themes-without-any-coding) of theme builder, we thought of adding few more features and enhancements to enable our users to create great themes to get their web, mobile applications looking well finished.  \n\n<!-- truncate -->\n\n## New Features\n\n### Adding new fonts \n\nOur new additions to the list of font-family will allow the users to select from trendy fonts for their application.\n\n![theme builder font list](/learn/assets/theme-builder-font-list.png)\n\n### Modified the preview app\n\n* Added a new layout for the Dashboard page. On change of the state colors (primary, info, warning, danger) the same will reflect for the icons used to show the overview details (tile blocks)\n\n![theme builder dashboard](/learn/assets/theme-builder-dashboard-page.png),  ![theme builder leftnav](/learn/assets/theme-builder-left-navigation.png)\n\n\n* Components like Headings, Labels, and notification alerts can be viewed in the \"Others\" link of the left navigation. Labels can be either with background color or only text color change as per the class selected.\n\n![theme builder headings](/learn/assets/theme-builder-headings.png)\n\n\n* Modified the user profile menu\n\n![theme builder popover menu](/learn/assets/theme-builder-popover-menu.png)\n\n\n* Added new components to the preview application for the users to get a better idea while creating their theme. These elements can give a brief idea of how the theme will look like. Hence added Buttons, Dropdown, Panels, Panel subheadings, Tree, Badges, Nav list, Breadcrumb, Accordions, and Top navigation list.\n\n![theme builder buttons and dropdowns](/learn/assets/theme-builder-buttons.png)\n![theme builder nav list](/learn/assets/theme-builder-navlist.png)\n![theme builder panels](/learn/assets/theme-builder-panels.png)\n![theme builder accordions ](/learn/assets/theme-builder-accordions.png)\n![theme builder topnav and subheadings](/learn/assets/theme-builder-topnav.png)\n\n\n\n### Feedback dialog\n\nIntroduced the new feedback dialog for users to share their experience using the app. We will be looking at the feedback received to carve next set of updates to the app.\n\n![theme preview](/learn/assets/theme-builder-feedback.png)\n\n### Google analytics\n\nIntegrated google analytics to track and report the traffic visit to the theme builder site.\n\n## Bug Fixes\n\n1. Alignment issues when layout selection includes a right nav on the page. This works fine now\n2. Redirection changes from #main to #Dashboard page to support google analytics. Working now\n3. Fixes to support the instant changes of the color and theme style of newly added components in the preview application. Works now\n4. On change of the primary color to a darker shade like #333, the hover/selected state of data table rows was effected. This is fixed now and the hover state will always apply a lighter shade of the primary color selected. \n5. Font selection for heading tags (h3 to h6) was not working. This is fixed now.\n\n\nSee you again with more updates."
    },
    {
      "id": "/2020/07/01/wavemaker-openapi-postgrest-support",
      "metadata": {
        "permalink": "/learn/blog/2020/07/01/wavemaker-openapi-postgrest-support",
        "source": "@site/blog/2020-07-01-wavemaker-openapi-postgrest-support.md",
        "title": "PostgREST OpenAPI support in WaveMaker",
        "description": "WaveMaker has added support for importing API that are documented using OpenAPIs, Swagger specification in 10.4. However building a robust OpenAPI support is very important as different API while using OpenAPI/Swagger document their endpoints in subtly different ways. We tried importing OpenAPI documents from different API sources. One such example is when we tested an OpenAPI document generated through PostgREST. In this blog we'll discuss what changes we have made in 10.5 in order to support OpenAPI documents generated from such sources.",
        "date": "2020-07-01T00:00:00.000Z",
        "formattedDate": "July 1, 2020",
        "tags": [],
        "readingTime": 2.7,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Nikhilesh K V"
          }
        ],
        "frontMatter": {
          "title": "PostgREST OpenAPI support in WaveMaker",
          "author": "Nikhilesh K V"
        },
        "prevItem": {
          "title": "Theme builder is ready with a new update",
          "permalink": "/learn/blog/2020/07/03/Another-update-to-theme-builder"
        },
        "nextItem": {
          "title": "Fully automated and scalable test execution using k8s",
          "permalink": "/learn/blog/2020/06/30/run-zalenium-tests-on-kubernetes-blog"
        }
      },
      "content": "WaveMaker has added support for importing API that are documented using [OpenAPIs, Swagger](/learn/blog/2020/04/21/wavemaker-openapi-import) specification in 10.4. However building a [robust](https://en.wikipedia.org/wiki/Robustness_principle) OpenAPI support is very important as different API while using OpenAPI/Swagger document their endpoints in subtly different ways. We tried importing OpenAPI documents from different API sources. One such example is when we tested an OpenAPI document generated through [PostgREST](http://postgrest.org/en/v7.0.0/). In this blog we'll discuss what changes we have made in 10.5 in order to support OpenAPI documents generated from such sources.\n<!-- truncate -->\n\n![OpenApi](/learn/assets/postGRESTlogo.png)\n\n## Introduction to PostgREST\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into a RESTful API. The structural constraints and permissions in the database determine the API endpoints and operations.\n\n## Structure of PostgREST generated OpenAPI Documents\n\nGenerally, the structure of an OpenAPI document generated out of a Spring/Node etc app looks like this.\n```\n   {\n       \"paths\":{\n           \"/employees\":{\n               \"post\":{\n                   \"parameters\":[\n                       {\n                           \"in\":\"body\",\n                           \"name\":\"employee\",\n                           \"description\":\"employee\",\n                           \"required\":true,\n                           \"schema\":{\n                                \"$ref\":\"#/definitions/Employee\"\n                           }\n                       },\n                       {\n                           \"in\":\"header\",\n                           \"name\":\"Prefer\",\n                           \"description\":\"Preference\",\n                           \"required\":false,                           \n                           \"type\":\"string\"\n                       }\n                   ]\n\n               }\n           }\n       },\n       \"definitions\":{\n           \"Employee\":{\n               \"type\":\"object\",\n               \"properties\":{\n                   \"empId\":{\n                        \"type\":\"string\"\n                   },\n                   \"empName\":{\n                        \"type\":\"string\"\n                   }\n               },\n               \"title\":\"Employee\"\n           }\n       }\n   }\n```\nThe above document indicates that the POST API expects an **employee** parameter of the type **Employee** in body and a **Prefer** parameter in header, therefore expecting the below parameters:\n- Prefer in header\n- empId and empName in Request Body\n\nNow let us see an OpenAPI document generated out of PostgREST.\n```\n{\n    \"paths\":{\n        \"/employees\":{\n            \"post\":{\n                \"parameters\":[\n                    {\n                        \"$ref\":\"#/parameters/body.employee\"\n                    },\n                    {\n                        \"$ref\":\"#/parameters/preferReturn\"\n                    }\n                ]\n            }\n        }\n    },\n    \"definitions\":{\n        \"Employee\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"empId\":{\n                    \"type\":\"string\"\n                },\n                \"empName\":{\n                    \"type\":\"string\"\n                }\n            }            \n        }\n    },\n    \"parameters\":{\n        \"preferReturn\":{\n            \"in\":\"header\",\n            \"name\":\"Prefer\",\n            \"description\":\"Preference\",\n            \"required\":false,\n            \"type\":\"string\"\n        },\n        \"body.employee\":{\n            \"in\":\"body\",\n            \"name\":\"employee\",\n            \"description\":\"employee\",\n            \"required\":true,\n            \"schema\":{\n                \"$ref\":\"#/definitions/employee\"\n            }            \n        }\n    }\n}\n``` \n\nNot only does WaveMaker allow importing of the REST API, but by parsing the entity definitions we generate user interface that handles create, read, update, delete of the entities. WaveMaker form generates form fields corresponding to the entity definition in the OpenAPI documentation. \n\nIf you have a look at the request parameters for the POST API, you can see that they are references to a different object in the document. So we will have to parse these parameters from the root level **parameters** object. On having a closer look at the **body.employee** parameter, we see that it is of the type **Employee**. We will have to parse its properties from the root level **definitions** object. By parsing these, we identify that the API expects the below parameters:\n- Prefer in header\n- empId and empName in Request Body\n\nSince we did not have this kind of parsing logic in 10.4, we were unable to extract the form fields on dragging a Form widget for **Employee** Entity.\n\n> This feature is part of WaveMaker 10.5 release. [Checkout more details on what is included in this release](learn/wavemaker-release-notes/v10-5-0).\n\n## Conclusion\n\nThe OpenAPI support in WaveMaker has been around for few months now and with this release we are making this more robust. Our target is to be able to import API from varied sources so that our users can quickly build out web, mobile applications. We would love to hear from you, if you have tried this feature out. Write to us at info@wavemaker.com."
    },
    {
      "id": "/2020/06/30/run-zalenium-tests-on-kubernetes-blog",
      "metadata": {
        "permalink": "/learn/blog/2020/06/30/run-zalenium-tests-on-kubernetes-blog",
        "source": "@site/blog/2020-06-30-run-zalenium-tests-on-kubernetes-blog.md",
        "title": "Fully automated and scalable test execution using k8s",
        "description": "WaveMaker product team is able to make weekly patch releases and, feature packed releases every alternate months. Typically product releases involve testing of several micro services, API’s and User interface, functionality etc. WaveMaker platform is composed of several such services, and functional testing can be only done by building apps using visual drag-n-drop studio. To ensure the best product quality for releases, our QA process involves building automation tests for APIs as well as UI functionality using Selenium.",
        "date": "2020-06-30T00:00:00.000Z",
        "formattedDate": "June 30, 2020",
        "tags": [],
        "readingTime": 4.265,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Tejaswi Maryala, Harish Vanama"
          }
        ],
        "frontMatter": {
          "title": "Fully automated and scalable test execution using k8s",
          "author": "Tejaswi Maryala, Harish Vanama",
          "keywords": [
            "zalenium",
            "selenium-grid",
            "kubernetes",
            "frequent-releases"
          ]
        },
        "prevItem": {
          "title": "PostgREST OpenAPI support in WaveMaker",
          "permalink": "/learn/blog/2020/07/01/wavemaker-openapi-postgrest-support"
        },
        "nextItem": {
          "title": "New file picker for mobile apps - Improvements in UI to select files in mobile",
          "permalink": "/learn/blog/2020/06/24/wavemaker-mobile-filepicker"
        }
      },
      "content": "WaveMaker product team is able to make [weekly patch releases and, feature packed releases](/learn/wavemaker-release-notes) every alternate months. Typically product releases involve testing of several micro services, API’s and User interface, functionality etc. WaveMaker platform is composed of several such services, and functional testing can be only done by building apps using visual drag-n-drop studio. To ensure the best product quality for releases, our QA process involves building automation tests for APIs as well as UI functionality using Selenium.  \n\n<!--truncate-->\n\n1. UI Tests based on Selenium\n2. API Tests based on RestTemplate\n\nWe have multiple environments i.e., Development, Staging and Production for WMO and several on-premise WME environment setups for enterprise customer releases. Our development team uses feature branches and when they merge these branches onto the master branch, we have to make sure all the existing automation tests pass. On a regular basis when each feature team performs a merge, we run a full set of automation tests at their beck and call.\n\nIf a new build is promoted to Production from Stage,  and at the same time if a merge is performed onto master or a build request is raised to trigger tests in the development environment, multiple test automation setups are needed simultaneously. Imagine, the amount of Devops automation needed to provision, de-provision the infrastructure needed for these test setups and delays caused in the process.\n\nPreviously, we used to have a handful of server machines where automation tests for one product environment can be run as a Job on a single machine. To complete the tests it takes a definite amount of time and to parallelize, multiple threads can be configured with each thread running a browser with UI functional tests using Selenium. If the threads are increased, browsers crash due to lack of sufficient memory needed for running selenium tests.\n\nDue to this, We wanted to build a scalable architecture which efficiently utilizes the infrastructure capacity and doesn’t require a lot of Devops effort to scale up and down our automation test setups.\n\n\n## Solution\n\nWe explored Kubernetes (k8s) Jobs for test execution and wanted to completely automate the process of automation test setups, No beck and call!\n\nFirst let us familiarize a few terms used in the Kubernetes world.\n\n**Cluster:** A cluster is a set of nodes or machines for running containerized applications.\n\n**Node:** A Node is a worker machine in Kubernetes and may be either a virtual or a physical machine, depending on the cluster. Each Node is managed by the Master. \n\n**Pod:**  A Kubernetes pod is a group of containers that are deployed together on the same host. Pods can be horizontally scale, which represent services in the micro services world.\n\n**Job:** The main function of a job is to create one or more pods and track the success of pods. \n\n**Namespace:** Namespaces help pod-to-pod communication using the same namespace. Typically used for application or environment grouping.\n\n## Test environment provisioning with k8s\n\nProvisioning separate test setups for different product environments is done by creating separate namespaces for API and UI Tests in a k8s cluster for each environment. For every request to run test automation, a Jenkins task is started that generates a k8s spec file and launches a k8s job.\n\nAs the test repo keeps updated frequently by the QA team with new automation tests, we compile and create an image and push it to the kubernetes registry.\n\nOnce k8s Job has started, a Pod will be created to execute commands in the k8s spec file given below\n\n* Maven command to execute tests\n* Upload test results to s3.\n\nOn completion of above commands, respective Job status will be changed to complete. \n\nAutomation tests for multiple product environments i.e stage or prod, will be executed in a k8s cluster as shown in the below picture. \n\n[![test_execution_k8s_cluster_infrastructure](/learn/assets/test_execution_k8s_cluster_infrastructure.png)](/learn/assets/test_execution_k8s_cluster_infrastructure.png)\n\nFor each product environment, there will be an API namespace where a k8s job is run to execute all the API tests. For running UI tests, Zalenium is used which requires a separate k8s namespace for running the remote driver and the browser container. K8s job for UI tests communicates to Zalenium’s remote driver and based on the configured threads the browser containers are scaled up to run these UI tests simultaneously.\n\nIn the case of test execution for multiple product environments, If resource/memory is not sufficient to create a browser container then k8s cluster can be configured to scale up on demand. After the pod execution is done k8s will perform a health check and close the nodes if no resources are being utilized.\n\n## Conclusion\n\nWith this approach, our automation test setup provisioning for multiple product environments has been completely automated, we can scale up and down nodes to speed up test execution times due to scalable infrastructure. Since, we have enabled parallel execution of selenium tests using multiple browser instances, we have achieved significant time reduction for running the tests.\n\nJob|K8s Setup Execution Time reduction \n--------|----------------------------\nSanity Tests Execution|55%\nRegression Tests Execution|60% (10 hours -> 4 hours)\nSanity and Regression as parallel Jobs|60%\n\n> Checkout what is in our latest release [WaveMaker 10.5 here](/learn/wavemaker-release-notes/v10-5-0)."
    },
    {
      "id": "/2020/06/24/wavemaker-mobile-filepicker",
      "metadata": {
        "permalink": "/learn/blog/2020/06/24/wavemaker-mobile-filepicker",
        "source": "@site/blog/2020-06-24-wavemaker-mobile-filepicker.md",
        "title": "New file picker for mobile apps - Improvements in UI to select files in mobile",
        "description": "Uploading files from a mobile phone is a common use case that every mobile app has. Until last release, WaveMaker UI to select files had the following problems.",
        "date": "2020-06-24T00:00:00.000Z",
        "formattedDate": "June 24, 2020",
        "tags": [],
        "readingTime": 1.545,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Srinivasa Rao Boyina"
          }
        ],
        "frontMatter": {
          "title": "New file picker for mobile apps - Improvements in UI to select files in mobile",
          "author": "Srinivasa Rao Boyina"
        },
        "prevItem": {
          "title": "Fully automated and scalable test execution using k8s",
          "permalink": "/learn/blog/2020/06/30/run-zalenium-tests-on-kubernetes-blog"
        },
        "nextItem": {
          "title": "Deliver faster applications with WaveMaker!",
          "permalink": "/learn/blog/2020/06/23/deliver-faster-applications-with-wavemaker"
        }
      },
      "content": "Uploading files from a mobile phone is a common use case that every mobile app has. Until last release, WaveMaker UI to select files had the following problems.\n\n1. Failing to honor multiple/single flag in some of the cases.\n2. UI for selecting images and UI for selecting videos are completely different.\n3. There is no option to select files from Google drive or Cloud drive.\n4. UI to select files (filetype: file) is very basic and doesn't provide much file information (thumbnails, last modified time etc.,).\n\n<!-- truncate -->\n\n> WaveMaker allows creation of mobile applications by a simple drag and drop approach. [Click here to know more](/learn/hybrid-mobile/first-mobile-app).\n  \n## Solution\n\nA Cordova plugin was created (with open source license) by WaveMaker team to address the above problems. Please visit [github repo of the plugin](https://github.com/wavemaker/wm-filepicker-plugin) to know more about the plugin. \n\nThis plugin requires Swift 4.2 runtime, which was released in 2018. Since iOS13, Swift 4.2 runtime is part of the iOS. For earlier versions of iOS (10-12), Swift 4.2 runtime is added to [IPA bundle by the XCode](learn/wavemaker-release-notes/v10-5-0). Due to that addition, the size of IPA will increase (~70 MB). If your app doesn't need to support iOS version 12 and lesser, changing deployment-target preference in config.xml to iOS 13 will reduce the IPA size.\n  \n#### WavaMaker mobile apps automatically upgraded to use this file picker\n\nLike always, with WaveMaker product updates, we also migrate applications that are already implemented. So if your WaveMaker mobile app was using file picker plugin then you simply get the new & better functionality without taking any action.\n\n## Known Issues\n\n 1. ~~In iOS, selection of multiple videos from local Photo Library is not supported.~~ This issue is addressed in WaveMaker 10.6.0 release.\n \n > This feature is part of WaveMaker 10.5 release. [Checkout more details on what is included in this release](learn/wavemaker-release-notes/v10-5-0)."
    },
    {
      "id": "/2020/06/23/deliver-faster-applications-with-wavemaker",
      "metadata": {
        "permalink": "/learn/blog/2020/06/23/deliver-faster-applications-with-wavemaker",
        "source": "@site/blog/2020-06-23-deliver-faster-applications-with-wavemaker.md",
        "title": "Deliver faster applications with WaveMaker!",
        "description": "Performance is key to the success of any application. Even though an app is feature-rich if it's not responsive to user actions it might lose its userbase. WaveMaker is a platform enables our users to develop web, mobile applications. We strive to enable top notch performance of these apps. Towards this goal, with each release, WaveMaker introduces changes aiding in optimization of generated apps in terms of code, build outputs & serving of the apps. The optimizations are made available to the customers out of the box. It requires minimal or no changes to be done by low code developers while building an app in WaveMaker, thus easing the process of building faster apps.",
        "date": "2020-06-23T00:00:00.000Z",
        "formattedDate": "June 23, 2020",
        "tags": [],
        "readingTime": 5.03,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Subodh Kumar"
          }
        ],
        "frontMatter": {
          "title": "Deliver faster applications with WaveMaker!",
          "author": "Subodh Kumar"
        },
        "prevItem": {
          "title": "New file picker for mobile apps - Improvements in UI to select files in mobile",
          "permalink": "/learn/blog/2020/06/24/wavemaker-mobile-filepicker"
        },
        "nextItem": {
          "title": "WaveMaker releases 10.5 version",
          "permalink": "/learn/blog/2020/06/23/product-update-10-5-whats-new"
        }
      },
      "content": "Performance is [key to the success](https://developers.google.com/web/fundamentals/performance/why-performance-matters) of any application. Even though an app is feature-rich if it's not responsive to user actions it might lose its userbase. WaveMaker is a platform enables our users to develop web, mobile applications. We strive to enable top notch performance of these apps. Towards this goal, with each release, WaveMaker introduces changes aiding in optimization of generated apps in terms of code, build outputs & serving of the apps. The optimizations are made available to the customers out of the box. It requires minimal or no changes to be done by low code developers while building an app in WaveMaker, thus easing the process of building faster apps.\n\n<!-- truncate -->\n\n> This feature is part of WaveMaker 10.5 release. [Checkout more details on what is included this release](learn/wavemaker-release-notes/v10-5-0). \n\nAs per the Google stats link shared above, BBC lost 10% of its users with each additional second the site took to load & Pinterest gained 15% users signup when the perceived load times were reduced to 40%. So, performance is one of the important factors to consider in app development. An app with good performance can help businesses in better signups, enhanced user engagement & result in improved sales.\n\n### Performance in WaveMaker\n\nWaveMaker is a low code platform that continuously works on performance optimizations so that it helps customers to not only build quickly but deliver application that load fast. WaveMaker adopts the best practices that are evolving in the world of web applications and brings those to its customers & applications.\n\nWhen a user accesses an app, the speed with which it loads & becomes responsive is a testimony to its performance. Each page in the application infact needs multiple resources to be loaded. The loading speed is a function of below-listed factors,\n\n* Size of the resources loaded by the page\n* Network Speed\n* Number of HTTP Resource Requests required to build the page\n* Time spend on the server in crafting the response\n* User perception of app readiness\n\nWaveMaker generates Angular code for the applications. Thus has the flexibility to leverage Angular build tools to optimize the application for better load times. Besides, if third party dependencies are required, modular libraries are preferred. WaveMaker component library of 100+ rich widgets. Still, the application build is only composed of components used. Below is the summary of optimizations that are delivered over past releases,\n\n* Treeshaking/Dead Code Elimination, with the help of Angular Production Build & modular component library\n* Lazy Loading of Routes & Components, so that user is served with just the required code as they navigate pages of the app\n* Enable modern compression algorithms such as [gzip & brotli](https://www.wavemaker.com/faster-page-load-times-using-brotli-compression/) for all the requests reducing the network load & time.\n\nWith the current release i.e., version 10.5, WaveMaker team is pleased to announce support for deployment of frontend artifacts onto a Content Delivery Network, which can help in reducing the download time of static resources by ~30%.\n\n### Content Delivery Network\n\nA Content Delivery Network(CDN) is a set of the geographically distributed servers which together enable fast, reliable & secure delivery of internet content including HTML, Javascript, Stylesheets, Images, etc., \n\nWith CDN, the content is served from the CDN-edge server closest to the user location helping in faster load times. With caching & other optimizations CDN also reduces the amount of data origin servers must provide, thus reducing hosting costs. With its distributed nature CDN can ensure better availability and can handle failures better than any origin servers. With all these benefits CDN ensures consistent user experience for an app across the geographical locations. \n\nTo enable an application to make its artifacts served over CDN, the developer needs to handle additional operations such as,\n* Configure the Origin source & Content Delivery Network\n* Managing build artifacts with each release\n* Cache invalidations to ensure the user is served latest response\n* Additional operations based on CDN provider & more\n\nBut we wanted our low code developer to have access to all the CDN goodness very easily. So WaveMaker has made it available on click of a button, literally. With the current release, when the user deploys the WaveMaker app by clicking the \"Deploy\" button, it is deployed on AWS with CDN support without any additional configuration. This convenience is only available in the first phase of the deployment pipelines of the application. Note that, applications are deployed to this phase so that the app can be tested by the team & only last for limited period of time. [See deploying to live phase](/learn/app-development/deployment/manage-deployed-apps#configure-live-phase).\n\n### CDN intergration with WaveMaker\n\nUnder the hood, WaveMaker handles all operations required for CDN deployment of apps as listed below,\n* Build process is updated with artifacts generation for front-end only static assets such as javascript, CSS, etc.,\n* Upload the static assets of the project to Amazon S3\n* CloudFront which is AWS-CDN service provider configured with all the required properties.\n* Updates the deployed project to serve static assets from Cloudfront CDN.\n\nThus ensuring the customers benefit from CDN advantages for every app developed with no additional effort.\n\nHowever, for deploying onto production, the customers may prefer their cloud service provider with the help of CI, CD pipelines. [Here is the documentation](/learn/app-development/deployment/app-integration-with-aws-cdn) on how to configure your CI,CD pipeline to deploy to CDN. In the subsequent releases, we will also support one-click deployment to deploy on customer cloud providers. \n\n### Results\n\nBelow are the stats from WaveMaker testing with CDN integration comparing the download times of static assets for some of the standard sized applications,\n\n| Application | Reduced Download Time |\n|-------------|-----------------------|\n| Starter App |                   ~39%|\n| WaveKart    |                   ~29%| \n| [SalesVision](https://www.wavemaker.com/showcase/docs/salesVision) |                   ~30%| \n\nAs stated, improving performance is a continuous endeavor for WaveMaker & more optimizations will be delivered to the customers with each release. So, stay tuned for more.  Also please share your thoughts or feedback on the optimizations achieved or other approaches to improve the performance of WaveMaker apps to info@wavemaker.com"
    },
    {
      "id": "/2020/06/23/product-update-10-5-whats-new",
      "metadata": {
        "permalink": "/learn/blog/2020/06/23/product-update-10-5-whats-new",
        "source": "@site/blog/2020-06-23-product-update-10-5-whats-new.md",
        "title": "WaveMaker releases 10.5 version",
        "description": "With working from home as a new normal, we have released yet another major update with some of the most interesting features in it. To learn about our detailed list of features and fixes, see WaveMaker Release Notes 10.5.",
        "date": "2020-06-23T00:00:00.000Z",
        "formattedDate": "June 23, 2020",
        "tags": [],
        "readingTime": 2.76,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "WaveMaker releases 10.5 version",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Deliver faster applications with WaveMaker!",
          "permalink": "/learn/blog/2020/06/23/deliver-faster-applications-with-wavemaker"
        },
        "nextItem": {
          "title": "GraphQL in a Micro Services Architecture",
          "permalink": "/learn/blog/2020/06/11/graphql-microservice-architecture"
        }
      },
      "content": "With working from home as a new normal, we have released yet another major update with some of the most interesting features in it. To learn about our detailed list of features and fixes, see [WaveMaker Release Notes 10.5](/learn/wavemaker-release-notes/v10-5-0).\n\nAs a modern development team, we are adapting to the latest technology trends. If there is something you feel WaveMaker should have, do let us know [here](mailto:info@wavemaker.com).\n\nNow, let's jump straight to see what's new in this release!\n\n<!-- truncate -->\n\n## Deploying to CDN\n\n***Well, speed matters!***\n\nEnsuring a consistent user experience is important not just in terms of features and looks, but also in terms of speed. With our 10.5 update, we are all set to adapt CDN into WaveMaker. This allows WaveMaker apps to work together with geographically distributed servers that enable fast, reliable, and secure delivery of the content. Now, you can deploy your apps with CDN automatically. To read our developer blog, see [delivering your apps faster with WaveMaker](/learn/blog/2020/06/23/deliver-faster-applications-with-wavemaker).\n\n## Custom Formatter\n\n***Customize data more SPECIFIC to your audience!***\n\nYou can now write custom data formatter to convert data from services to a well-formatted data before showing it in the UI. You can control how you want to show data depending on the role, country, currency, and more. \n\nFor example, John is a card-holder, he can view his card details without any restrictions, whereas the bank admin cannot see his complete **card number**, which is masked with specific characters as shown below.\n\n![custom formatter](/learn/assets/custom-formatter.png)\n\nTo learn about the usage of this feature, see [Using Custom Formatter for masking sensitive data](/learn/how-tos/using-custom-formatter).\n\n## Data Table Widget Summary Row\n\n***If Data Table is your widget, this is for you!***\n\nA table is considered as the most preferred method to represent data that talk! And having to do more with the Data Table adds so much value to it. And we are thrilled to add a summary row function, which helps you to calculate the summary with in-built javascript functions like sum, minimum, maximum, percent, and more.\n\n![summary row function](/learn/assets/datatable_summaryrow4.png)\n\nTo learn more about how it works, check out the [Data Table summary row documentation](/learn/app-development/widgets/datalive/datatable/summary-row).\n\n## Smart Widget Templates\n\n***Just pick, click and apply away!***\n\nFor [Cards](/learn/app-development/widgets/datalive/cards), [List](/learn/app-development/widgets/datalive/list), and [Wizard](/learn/app-development/widgets/container/wizard) widgets, you can now quickly choose alternative UI representations while you can visually see the changes as you click on the template - just how the SmartArt works in PowerPoint. \n\n![widget template](/learn/assets/widget-template.gif)\n\nFor more information about applying a template as well as a layout from the canvas, see [Using Smart Template and Layout for Widgets](/learn/how-tos/widget-template-layout).\n\n## Extended Micro-frontend Support\n\n***Smaller apps are easy to develop, maintain and communicate with each other!***\n\nIn the last [update 10.4](/learn/wavemaker-release-notes/v10-4-0), we introduced support for building Micro-frontend applications. This architecture encourages the independent delivery of frontend applications with a Node-based CLI. A CLI helps to convert **[WaveMaker](https://www.wavemakeronline.com/login/login)** apps to **[Single-spa](https://single-spa.js.org/)** compatible app. This release includes the version update of `single-spa-angular` to 3.4  for better support of Angular 7 projects.\n\n## Well, that's not it\n\nSome of the critical bugs have been fixed in the release. See the list of [bug fixes here](/learn/wavemaker-release-notes/v10-5-0/).\n\nAnd most importantly, [despite the lockdown, our team is staying agile and adapting](https://www.wavemaker.com/delivering-major-product-update-from-home/) to be able to deliver product updates. Stay safe and go ahead and create that application to digitise and create new efficiencies."
    },
    {
      "id": "/2020/06/11/graphql-microservice-architecture",
      "metadata": {
        "permalink": "/learn/blog/2020/06/11/graphql-microservice-architecture",
        "source": "@site/blog/2020-06-11-graphql-microservice-architecture.md",
        "title": "GraphQL in a Micro Services Architecture",
        "description": "Today it is becoming more and more common to break down a monolithic architecture into micro services, thereby you get many small APIs that work independently. In micro services architecture, a bunch of services are broken down into independent smaller services which expose standard REST APIs to interact with.",
        "date": "2020-06-11T00:00:00.000Z",
        "formattedDate": "June 11, 2020",
        "tags": [],
        "readingTime": 6.185,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Vibhu Singhal"
          }
        ],
        "frontMatter": {
          "title": "GraphQL in a Micro Services Architecture",
          "author": "Vibhu Singhal"
        },
        "prevItem": {
          "title": "WaveMaker releases 10.5 version",
          "permalink": "/learn/blog/2020/06/23/product-update-10-5-whats-new"
        },
        "nextItem": {
          "title": "Build Themes for WaveMaker Apps Without Any Coding",
          "permalink": "/learn/blog/2020/06/01/build-themes-without-any-coding"
        }
      },
      "content": "Today it is becoming more and more common to break down a monolithic architecture into micro services, thereby you get many small APIs that work independently. In micro services architecture, a bunch of services are broken down into independent smaller services which expose standard REST APIs to interact with.\n<!-- truncate -->\n\nThey come with obvious advantages as these micro services are:\n- Highly maintainable and testable\n- Loosely coupled\n- Independently deployable\n- Organized around business capabilities\n- Owned by a small team\n\n## Problems in a micro service architecture\n\nAlthough micro services make it easy for the services to be micromanaged by individual owners, it poses a challenge to the consumer of these APIs. For example a front end app that wants data which may be served at different micro services, the client has to make an API call to each microservice and combine the data to finally consume it in the UI elements. There is also the problem of over fetching and under fetching with these APIs. There could be certain fields in the data from one API, which the UI client may not even need, but still a bloated data is fetched.\n\nLet's consider a simple example of a bookstore app with just two entities, a `Book` and an `Author`. Each entity is maintained by an individual microservice.\n\n![MicroServices_Architecture Example](/learn/assets/GraphQL_Example.png)\n\nIn order to display details of a book, minimum two API calls are required to be made, one to get Book info and one to get the respective Author info.\nSimilarly, to display an Author details with all the Books written by them, two API calls are required to be made, one to get Author info and one to get the list of books for that author.\n\nThis approach has visible issues such as:\n- multiple API calls required to be made to get relevant data, resulting into chattiness between client and server\n- this makes the app brittle and multiple calls slow down the app\n- since each micro service is now exposed to the client, all of them have to be made secure\n\n## GraphQL in a micro service architecture\n\nIn order to solve this problem, the framework that is being widely used these days is GraphQL. One way to look at it is that GraphQL can be leveraged as an API gateway for interacting with multiple micro services, each dedicated to a single resource type while living alongside standard REST routes.\n\nGraphQL and micro services are a perfect fit, because GraphQL hides the fact that you have a microservice architecture from the clients. From a backend perspective, you want to split everything into micro services, but from a frontend perspective, you would like all your data to come from a single API. GraphQL lets you split up your backend into micro services, while still providing a single API to all your application, and allowing joins across data from different services.\n\nIf the bookstore scenario discussed above is implemented with a GraphQL middleware, the architecture would look something like below:\n![GraphQL_MicroServices_Architecture](/learn/assets/GraphQL_MicroServices_Architecture.png)\n\n## What is GraphQL\n\nGraphQL is an API that was invented and open sourced by Facebook as a better replacement for REST. It can be understood as Query language for APIs, which enables declarative data fetching by exposing a single endpoint and responds to queries. In REST, there is always a dedicated endpoint for each type of request and can't be customized. In GraphQL, the client decides what data they need and that's the reason the client sends a query (payload) to the server and the server sends the data back as per the query request. There is where they get the name GraphQL GraphQL is, in many ways, one of the more powerful tools an API provider has in terms of providing singular endpoints to the consumer and controlling data flow.\n\nHere is an example of a query to fetch an `Author` by `id`:\n\n![Bookstore Query Example](/learn/assets/GraphQL_Query_Bookstore_Example.png)\n\n## Type system in GraphQL\nGraphQL’s powerful expressive ability mainly comes from its complete type system. Unlike REST, it regards all resources in the entire Web service as a connected graph, rather than a resource island, which can be accessed when accessing any resource. Access other resources through connections between resources.\n\nThe bookstore schema graph would look something like below:\n\n![GraphQL Schema Example](/learn/assets/GraphQL_Schema_Example.png)\n\n## Wiring data with a GraphQL query\nGraphQL can simply be treated as the middleware of a back end system. Hence, it is very easy to plug it in with existing systems. For example, in NodeJS implementation of GraphQL, data against a query can be fetched via a `resolve` function, that simply returns a promise. The logic to query the data (e.g. calling an existing REST API) can be written in this resolve function.\n\nFor our bookstore app, the NodeJS implementation to fetch `Author` details by id would look something like below. Note the `resolve` function. Data here is fetched from a MongoDB model.\n```\n    author: {\n        type: AuthorType,\n        args: {id: {type: GraphQLID}},\n        resolve(parent, args) {\n            // fetch author by id from MongoDB\n            return AuthorModel.findById(args.id);\n        }\n    }\n```\nSimilarly, while defining the `Author` schema type object, the logic to fetch all `Books` under the author can be wired as below. Again, notice the resolve function.\n```\nconst AuthorType = new GraphQLObjectType({\n\tname: 'Author',\n\tfields: () => ({\n\t\tid\t\t: {type: GraphQLID}, \n\t\tname\t: {type: GraphQLString},\n\t\tage\t\t: {type: GraphQLInt},\n\t\tbooks \t: {\n\t\t\ttype: new GraphQLList(BookType),\n\t\t\tresolve(parent, args){\n\t\t\t\treturn BookModel.find({authorid: parent.id})\n\t\t\t}\n\t\t}\n\t})\n})\n```\n\n## Authentication and Authorization with GraphQL\n\nAuthentication and authorization are other issues that need to be considered when using GraphQL. Do we process them before or after the GraphQL parsing process?\nTo answer this question, you can think of GraphQL as a DSL (Domain Specific Language) on top of your own backend data acquisition logic. We just need to think of it as an intermediate layer that can be placed between the client and our actual data service (or multiple services).\nThen consider authentication and authorization as another layer. GraphQL is not useful in the actual implementation of authentication or authorization logic because it does not mean it. However, if we want to place these layers behind GraphQL, we can use GraphQL to pass the access token between the client and Auth API. This is very similar to the way we authenticate and authorize via the RESTful API.\n\n## Integrating with a WaveMaker App\n\nThe GraphQL implementation (irrespective of the language implemented in) exposes a REST endpoint which is always a POST call with the query as request body. Now, this GraphQL endpoint can be imported into a WaveMaker app like any other REST API through the REST API import interface in WaveMaker studio. Once imported, UI can be built while binding to the GraphQL data in the form of a service variable without writing any code on the UI.\nFollow the document on [working with REST APIs in a WaveMaker app](/learn/app-development/services/web-services/rest-services).\n\n\n\n## Conclusion\n\nGraphQL is really good at describing schemas but also stitch together different APIs and the end result is something that's really useful for someone building an app as querying for data will be very simple. Different APIs is exactly what we have when we have a micro services architecture. Using GraphQL on top of it all means we can reap the benefits from our chosen architecture at the same time as an App can get exactly the data it needs."
    },
    {
      "id": "/2020/06/01/build-themes-without-any-coding",
      "metadata": {
        "permalink": "/learn/blog/2020/06/01/build-themes-without-any-coding",
        "source": "@site/blog/2020-06-01-build-themes-without-any-coding.md",
        "title": "Build Themes for WaveMaker Apps Without Any Coding",
        "description": "Creating and customizing the look and feel of WaveMaker applications is just a few clicks away now. We have introduced a theme building tool for changing color schemes and creating branding specs. Theme-builder brings the benefit of codeless theme creation in a few simple steps. With a built-in code editor, one can make changes and see custom styles instantly applied to the web components.",
        "date": "2020-06-01T00:00:00.000Z",
        "formattedDate": "June 1, 2020",
        "tags": [],
        "readingTime": 2.815,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Lovin Ahmed"
          }
        ],
        "frontMatter": {
          "title": "Build Themes for WaveMaker Apps Without Any Coding",
          "author": "Lovin Ahmed"
        },
        "prevItem": {
          "title": "GraphQL in a Micro Services Architecture",
          "permalink": "/learn/blog/2020/06/11/graphql-microservice-architecture"
        },
        "nextItem": {
          "title": "COVID-19 Visualization using WaveMaker - Part 2",
          "permalink": "/learn/blog/2020/04/30/covid19-visualization-using-wavemaker-part-2"
        }
      },
      "content": "Creating and customizing the look and feel of WaveMaker applications is just a few clicks away now. We have introduced a theme building tool for changing color schemes and creating branding specs. Theme-builder brings the benefit of codeless theme creation in a few simple steps. With a built-in code editor, one can make changes and see custom styles instantly applied to the web components.  \n\n<!-- truncate -->\n\nA theme is a preset package containing graphical appearance details. It is often used to change the look and feel of multiple things at once, which makes the elements less granular than allowing the user to set each option individually. For example, you can specify your company's branding colors for your project.  \n\nLink to the app: http://apps.wavemakeronline.com/Theme_Builder/#/Dashboard\n\n![theme builder](/learn/assets/theme-builder.png)\n\n## Customize color, typography, and style\n\nTo begin customizing a theme, one can modify values for color, typography, and style. By default, the preview application starts with the material theme applied. We can switch between different theme styles and instantly preview the changes.\n\n![theme preview](/learn/assets/theme-builder-preview.png)\n\n### Color\n\nTo change your theme colors, replace the predefined #HEX color code with a custom color.\n\nPrimary color maps to all active components and elements like(primary buttons, selected tabs, nav items, etc), while secondary color accents the icon colors for date and time selection. Background color applies to the scrollable content, while the text color maps to the body text and captions used in the application. \n\n**Header** and **Left nav** colors define the coloring scheme for background, text, and active links. We also have **More** options to handle the notification and disable state colors.\n\n![apply colors](/learn/assets/Theme-builder-step1.png)\n\n### Typography\n\nTo change your theme's typography, choose the options from the dropdown, be it font-family, or the size of headings and body text.\n\n![apply font](/learn/assets/Theme-builder-step2.png)\n\n### Style\n\nApplying different styles like Flat, Material, and Gradient. This will help you understand how the components change. Each selection will override the existing behaviour of the elements displayed in the preview section.\n\n**Flat**: The flat-theme includes a solid background to the elements with active states. It also adds an outlined border for user inputs.\n\n**Material**: The material-theme has a sleek finish with elevated shadows to understand each element's relative importance and focus their attention.\n\n**Gradient**: The gradient theme fills the content blocks with a linear gradient shade starting from top to bottom.\n\n![apply style](/learn/assets/Theme-builder-step3.png)\n\n### How to build a theme\n\n1. Go to https://apps.wavemakeronline.com/Theme_Builder/#/Dashboard\n2. Click on the Explore/Create themes\n3. On the Editor page, customize the #HEX values with your brand colors.\n4. Select applicable font-family and sizes for your content and heading texts.\n5. Switch between styles types to suit your requirement accordingly.\n6. Icons changes are in progress (coming soon)\n7. Click done, and give a name to your newly created theme from the dialog.\n8. Import and apply the downloaded theme into any of your WaveMaker applications.\n\nModifying all the variables in your editor will create your new theme ready to download. Once provided a name, the theme will be downloaded as a .zip file. Import and apply to the WaveMaker built applications.  \n\nBingo! We are ready with the theme.\n\n## What's next\n\nIn the next release version, we will feature the icons and more styling options.\n> Update: Check out [additions we made in the second release](/learn/blog/2020/07/03/Another-update-to-theme-builder) since this announcement.\n\n## See Also\n\nFor more information on developing themes, see [Creating themes](/learn/app-development/ui-design/creating-themes)."
    },
    {
      "id": "/2020/04/30/covid19-visualization-using-wavemaker-part-2",
      "metadata": {
        "permalink": "/learn/blog/2020/04/30/covid19-visualization-using-wavemaker-part-2",
        "source": "@site/blog/2020-04-30-covid19-visualization-using-wavemaker-part-2.md",
        "title": "COVID-19 Visualization using WaveMaker - Part 2",
        "description": "In my last blog post, we saw how the Corona Tracker app works and we discussed how to build a dashboard using WaveMaker. I recommend you to read the part-1 of the blog first. In this post, we will see how to build visualization for charts and visualization for maps.",
        "date": "2020-04-30T00:00:00.000Z",
        "formattedDate": "April 30, 2020",
        "tags": [],
        "readingTime": 3.465,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Deepak Anupalli"
          }
        ],
        "frontMatter": {
          "title": "COVID-19 Visualization using WaveMaker - Part 2",
          "author": "Deepak Anupalli"
        },
        "prevItem": {
          "title": "Build Themes for WaveMaker Apps Without Any Coding",
          "permalink": "/learn/blog/2020/06/01/build-themes-without-any-coding"
        },
        "nextItem": {
          "title": "COVID-19 Visualization using WaveMaker - Part 1",
          "permalink": "/learn/blog/2020/04/27/covid19-visualization-using-wavemaker"
        }
      },
      "content": "In my last blog post, we saw how the Corona Tracker app works and we discussed how to build a dashboard using WaveMaker. I recommend you to read the [part-1](/learn/blog/2020/04/27/covid19-visualization-using-wavemaker) of the blog first. In this post, we will see how to build [visualization for charts](#how-to-build-charts-visualization) and [visualization for maps](/learn/blog/2020/04/30/covid19-visualization-using-wavemaker-part-2#how-to-build-maps-visualization).\n\n<!-- truncate -->\n\n### Quick Recap\n\nLink to the app: http://apps.wavemakeronline.com/CoronaTracker/\n\nPreviously, we covered how to import REST API as datasource for the app and how to create a variable to access the REST API, and binding the widgets to the created variable.\n\nFor more information, see [Corona Tracker App](/learn/blog/2020/04/27/covid19-visualization-using-wavemaker#corona-tracker-app), [walkthrough of the app](/learn/blog/2020/04/27/covid19-visualization-using-wavemaker#quick-walkthrough-of-the-app), and [how to build the dashboard](/learn/blog/2020/04/27/covid19-visualization-using-wavemaker#how-to-build-the-dashboard).\n\n## How to build Charts Visualization\n\nWaveMaker has in-built nvd3 based charts which are used for building plots for visualization in this app. Drag-n-drop any chart widget to canvas and bind the dataset property to the Variable for plotting data as shown below.\n\n[![DnD Chart widget](/learn/assets/wm-blog-covid19-18-charts-visualization.png)](/learn/assets/wm-blog-covid19-18-charts-visualization.png)\n\n[![Bind values](/learn/assets/wm-blog-covid19-19-bind-chart-values.png)](/learn/assets/wm-blog-covid19-19-bind-chart-values.png)  \n\n### Configuring axes\n\nAfter binding the variable for the dataset, configure x-axis and y-axis from the attributes of the dataset. By just picking these attributes your chart will be ready for viewing.\n\nIn this particular case for the [bar chart](/learn/app-development/widgets/chart/chart-widget#4-bar-chart), we have picked *country* on x-axis and *confirmedCases* attribute from API, to be depicted for each country on y-axis.\n\n### Configuring titles\n\nIn the advanced settings for chart widget, there are several configuration options provided for configuring the axis titles, values, bar spacing etc.\n\n[![Configuring titles](/learn/assets/wm-blog-covid19-20-configuring-titles.png)](/learn/assets/wm-blog-covid19-20-configuring-titles.png)\n\n[![Top affected countries](/learn/assets/wm-blog-covid19-21-top-affected-countries.png)](/learn/assets/wm-blog-covid19-21-top-affected-countries.png)\n\nTop countries bar chart is ready!\n\nWait, How did we pick only 10 countries from the entire list of 180+ countries returned by the API?\n\nAlso, how did we calculate the metrics for “Rest of World”?\n\nThis is where low-code comes into play, you can write javascript code to customize your dataset. After fetching the API response, you can calculate any custom metrics and also create a separate dataset for top countries as shown.\n\n[![low code](/learn/assets/wm-blog-covid19-22-low-code-js.png)](/learn/assets/wm-blog-covid19-22-low-code-js.png)\n\n## How to build Maps Visualization\n\nMaps is not an in-built widget in WaveMaker, using datamaps javascript library a Prefab is created. Datamaps takes JSON input for countries with their code and a colormap to plot the visualization.\n\nPrefabs are typically built by a javascript developer who knows the nuances of working with a javascript library and creates a widget or prefab out of it. The Prefab developer will provide attributes that are available to WaveMaker low-code developers when the widget is dropped onto the canvas.\n\n### Creating a Prefab\n\n:::tip\nDownload the **[D3Maps.zip](https://github.com/wavemaker/prefab-datamaps)**, and import it the **Prefabs** section to use it straightaway. For more information about how to use it, see [Importing Prefab](/learn/app-development/custom-widgets/custom-widgets#importing-prefabs).\n:::\n\n:::note\nTo create a Datamaps Prefab, see a detailed documentation of [How to Create a Prefab Using D3 Library DataMaps](/learn/how-tos/create-prefab-using-d3-library-datamaps).\n:::\n\nThe following are the attributes provided by the Datamaps prefab developer that will appear in the Studio properties panel for binding.\n\n[![Prefab config](/learn/assets/wm-blog-covid19-11-prefab-config.png)](/learn/assets/wm-blog-covid19-11-prefab-config.png)\n\n### Testing the prefab independently\n\nA Prefab project is another type of a project, where you can build a reusable component or widget and publish it to the workspace. Prefab developers will be able to test the prefab independent of the application by providing test data through an editor, as shown.\n\n[![Prefab config](/learn/assets/wm-blog-covid19-12-testing-prefab.png)](/learn/assets/wm-blog-covid19-12-testing-prefab.png)\n\n[![Prefab config](/learn/assets/wm-blog-covid19-13-prefab-values.png)](/learn/assets/wm-blog-covid19-13-prefab-values.png)\n\n### Publishing a Prefab\n\nAfter the prefab is tested independently, it can be published to the workspace so that WaveMaker developers can start using it as a widget in the Studio.\n\n[![Prefab config](/learn/assets/wm-blog-covid19-14-prefab-publish.png)](/learn/assets/wm-blog-covid19-14-prefab-publish.png)\n\n### Using Maps Prefab as a widget\n\nAfter the Prefab is published, under the prefabs section in Studio the maps prefab appears just like any other widget.\n\n[![maps prefab](/learn/assets/wm-blog-covid19-15-using-maps-prefab.png)](/learn/assets/wm-blog-covid19-15-using-maps-prefab.png)\n\n### Defining Color Map and Dataset\n\nColor map needed for the maps prefab can be created as a variable, shown below.\n\n[![maps prefab](/learn/assets/wm-blog-covid19-16-color-map-dataset.png)](/learn/assets/wm-blog-covid19-16-color-map-dataset.png)\n\nUsing javascript, we have created a custom maps dataset from the REST API response, by calculating the color codes based on the confirmed cases in each country as shown.\n\n[![maps prefab](/learn/assets/wm-blog-covid19-17-custom-maps-dataset.png)](/learn/assets/wm-blog-covid19-17-custom-maps-dataset.png)\n\n## Summary\n\nUsing single-click deployment from WaveMaker, the app is deployed on to containers and made available publicly. Entire application was built by a single developer in 1 week.\n\n## See Also\n\n[COVID-19 Visualization using WaveMaker - Part 1](/learn/blog/2020/04/27/covid19-visualization-using-wavemaker)"
    },
    {
      "id": "/2020/04/27/covid19-visualization-using-wavemaker",
      "metadata": {
        "permalink": "/learn/blog/2020/04/27/covid19-visualization-using-wavemaker",
        "source": "@site/blog/2020-04-27-covid19-visualization-using-wavemaker.md",
        "title": "COVID-19 Visualization using WaveMaker - Part 1",
        "description": "Alongside the crisis that COVID-19 had brought to the world, there has never been so much prominence for the numbers. Almost every household, governments, businesses, media etc. are contemplating these numbers, creating models for prediction, taking measures to flatten these curves. That’s when we immediately jumped on to create an application using our own low-code platform.",
        "date": "2020-04-27T00:00:00.000Z",
        "formattedDate": "April 27, 2020",
        "tags": [],
        "readingTime": 3.3,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Deepak Anupalli"
          }
        ],
        "frontMatter": {
          "title": "COVID-19 Visualization using WaveMaker - Part 1",
          "author": "Deepak Anupalli"
        },
        "prevItem": {
          "title": "COVID-19 Visualization using WaveMaker - Part 2",
          "permalink": "/learn/blog/2020/04/30/covid19-visualization-using-wavemaker-part-2"
        },
        "nextItem": {
          "title": "WaveMaker Integrates with DigitalOcean Kubernetes for App Deployments",
          "permalink": "/learn/blog/2020/04/23/deployment-to-digital-ocean"
        }
      },
      "content": "Alongside the crisis that COVID-19 had brought to the world, there has never been so much prominence for the numbers. Almost every household, governments, businesses, media etc. are contemplating these numbers, creating models for prediction, taking measures to flatten these curves. That’s when we immediately jumped on to create an application using our own low-code platform.\n\nUsing WaveMaker, you can almost instantly create a chart or plot for visualization from any datasource. There are several API sources for COVID-19 data and with no code, using out-of-the-box widgets and charts the application has been built in just a few days.\n\n<!-- truncate -->\n\nIn this series of blog post, we discuss [how to build a dashboard](/learn/blog/2020/04/27/covid19-visualization-using-wavemaker#how-to-build-the-dashboard), and in the next post, we will see [how to build visualization for charts and maps](/learn/blog/2020/04/30/covid19-visualization-using-wavemaker-part-2). But before, let's do a little walkthrough of the app.\n\n## Corona Tracker App\n\nLink to the app: http://apps.wavemakeronline.com/CoronaTracker/\n\n![app](/learn/assets/wm-blog-covid-19.gif)\n\n[![screenshot](/learn/assets/wm-blog-covid19-01-dashboard.png)](/learn/assets/wm-blog-covid19-01-dashboard.png)\n\nNot only can you quickly build the dashboard, it is responsive automatically and one can access it on a mobile device as well as on a large screen.\n\n![screenshot](/learn/assets/wm-blog-covid19-02-mobile-dashboard.png)\n\n## Quick walkthrough of the app\n\nThe Corona Tracker application has an extensive dashboard with key metrics globally, i.e. Confirmed cases across several countries, recovered, deaths reported etc. The dashboard provides visualization for top 10 affected countries, plotting their death rates against recovery percentages, number of affected people in 1 million population etc.\n\nThis app also features datamaps with data set published by John Hopkins University, to visualize the spread of COVID-19 across the globe over a timeline.\n\n[![screenshot-data-maps-new-cases](/learn/assets/wm-blog-covid19-03-datamaps-cases.png)](/learn/assets/wm-blog-covid19-03-datamaps-cases.png)\n\n## How to build the dashboard\n\nUsing WaveMaker, the elements of the dashboard can be built in just 4 steps without writing code.\n\n1. Import datasource, REST API in this case\n2. Create variable to access the REST API\n3. Visually drag-n-drop widgets onto the canvas or editor \n4. Bind the widgets to Variable\n\n### Step 1: Import datasource, REST API in this case\n\nThe primary source of data for the dashboard are the following 2 REST APIs:\n\n```\nhttps://api.coronatracker.com/v3/stats/worldometer/country\n```\n\n```\nhttps://api.coronatracker.com/v3/stats/worldometer/global\n```\n\nImport the REST APIs using Web Services import editor, as shown below\n\n[![screenshot-import-rest](/learn/assets/wm-blog-covid19-04-studio-wsimport.png)](/learn/assets/wm-blog-covid19-04-studio-wsimport.png)\n\n### Step 2: Create Variable to access REST API\n\nCreate a Page for the dashboard, and create a Variable within this page for the imported REST API, which enables invocation of the API whenever the page is accessed. \n\n[![screenshot-bind-variables](/learn/assets/wm-blog-covid19-05-studio-variables.png)](/learn/assets/wm-blog-covid19-05-studio-variables.png)\n\n### Step 3: Drag-n-drop widgets on to Canvas\n\nKey metrics for confirmed cases, recovery & deaths are built as tiles as shown. Each tile is further divided into sections using a Grid Layout which can be further customized to represent the data.\nGrid Layout is used to define the arrangement of various widgets on the page, by dividing the page into several responsive blocks. The size of each block can be configured and new columns and rows can be inserted as needed.\n\n[![screenshot](/learn/assets/wm-blog-covid19-06-studio-canvas.png)](/learn/assets/wm-blog-covid19-06-studio-canvas.png)\n\n### Step 4: Bind widgets to the Variable for data\n\nAfter arranging the widgets on the canvas, we can bind data to these widgets from the created variable using the Properties panel.\nWaveMaker automatically identifies the JSON response structure from the imported REST API and makes it available for binding through variables.\n\n[![screenshot](/learn/assets/wm-blog-covid19-07-studio-binding.png)](/learn/assets/wm-blog-covid19-07-studio-binding.png)\n\n[![screenshot](/learn/assets/wm-blog-covid19-08-studio-binding-dialog.png)](/learn/assets/wm-blog-covid19-08-studio-binding-dialog.png)\n\n![screenshot](/learn/assets/wm-blog-covid19-09-dashboard-snippet.png)\n\nBingo! We have the metrics from the REST API in our dashboard page.\n\nWait!, how did we get the other metric for % of recovered people?\n\nApart from just binding the data to API response, WaveMaker enables writing simple expressions as shown below to compute data. ```f(n) = (totalRecovered * 100) / totalConfirmed``` gives the % recovery, alongside using other data formatting rules.\n\n[![screenshot](/learn/assets/wm-blog-covid19-10-studio-expression.png)](/learn/assets/wm-blog-covid19-10-studio-expression.png)\n\n### Step 5: Deploy to the cloud and we are done!\n\nFor more information, see how to deploy an app with [One-Click Deployment](/learn/app-development/deployment/one-click-deployment/).\n\n## What's next?\n\nIn the next series of the blog post for developing a Covid-19 visualization using WaveMaker, see how to build [visualization for charts](#how-to-build-charts-visualization) and [visualization for maps](/learn/blog/2020/04/30/covid19-visualization-using-wavemaker-part-2#how-to-build-maps-visualization).\n\n## See Also\n\n[COVID-19 Visualization using WaveMaker - Part 2](/learn/blog/2020/04/30/covid19-visualization-using-wavemaker-part-2)"
    },
    {
      "id": "/2020/04/23/deployment-to-digital-ocean",
      "metadata": {
        "permalink": "/learn/blog/2020/04/23/deployment-to-digital-ocean",
        "source": "@site/blog/2020-04-23-deployment-to-digital-ocean.md",
        "title": "WaveMaker Integrates with DigitalOcean Kubernetes for App Deployments",
        "description": "WaveMaker platform's one-click deploy feature now enables applications to be deployed to Kubernetes clusters on Digital Ocean cloud.",
        "date": "2020-04-23T00:00:00.000Z",
        "formattedDate": "April 23, 2020",
        "tags": [],
        "readingTime": 4.805,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Sanjana Raheja"
          }
        ],
        "frontMatter": {
          "title": "WaveMaker Integrates with DigitalOcean Kubernetes for App Deployments",
          "author": "Sanjana Raheja"
        },
        "prevItem": {
          "title": "COVID-19 Visualization using WaveMaker - Part 1",
          "permalink": "/learn/blog/2020/04/27/covid19-visualization-using-wavemaker"
        },
        "nextItem": {
          "title": "Deployment Experience made better!",
          "permalink": "/learn/blog/2020/04/22/deployments-made-better"
        }
      },
      "content": "WaveMaker platform's one-click deploy feature now enables applications to be deployed to Kubernetes clusters on Digital Ocean cloud. \n\nYou can configure the deployment topology as per your requirement and then with a single  button click, WaveMaker platform's deploy feature generates the docker files needed to build images, generates the K8S YAML files needed for deployment and triggers the K8S APIs for deployment. \nCustomer's don't have to write even a single line of K8S YAML file!!\n\nWaveMaker offers a pre-defined set of delivery phases which enables team a progression through Demo, Stage and Live phase. This let's you thoroughly verify your apps before taking them to the live environment.\n\nDemo phase uses WaveMaker's internal cloud. But the Stage and Live phases need to be configured to use your own AWS, Azure or GCP accounts. To this list of cloud providers to choose from, we are now adding Digital Ocean. This is the first Kubernetes based cloud provider supported by the WaveMaker Platform.\n\nLet us introduce you to the DigitalOcean Kubernetes cluster and walk you through the benefits of a Kubernetes based cloud provider and its deployments. \n\n<!-- truncate -->\n\n\n### Introduction to DigitalOcean Kubernetes\n\n[DigitalOcean Kubernetes (DOKS)](https://www.digitalocean.com/docs/kubernetes/) is a managed Kubernetes service that lets you deploy Kubernetes clusters without the complexities of handling the control plane and containerized infrastructure. Clusters are compatible with standard Kubernetes toolchains and integrate natively with DigitalOcean Load Balancers and block storage volumes.\n\n\n### Why to choose Kubernetes based deployments?\n\nBefore getting to the \"why\", let's understand first what basically is a kubernetes based deployment?\nTo understand the scope of this, let us first go through and compare the different era's of app deployments:\n\n**Traditional deployment era**: Every application was run on a physical server. Since no boundaries were defined for the applications in the physical server, there were instances when one application would take up all the resources resulting in all other applications to underpeform. Scaling of applications was difficult as resources were underutilized.\n\n**Virtualized deployment era**: Virtualization being the solution for shortcomings of the traditional deployments, also provided security of application's information as the applications were isolated between the VMs.\n\n**Container deployment era**: Containers, as we all know, are considered as lightweight systems as they are decoupled from the underlying infrastructure and at the same time have their own fileSystem, CPU, memory, process space etc. to maintain isolation between applications running.\nContainerized based deployments became popular due to multiple benefits like resource isolation, resource utilization etc. \n\n[![screenshot](/learn/assets/Containerized_Deployment_DO_blog.png)](/learn/assets/Containerized_Deployment_DO_blog.png)\n\nSo then why do you need Kubernetes and what can be done with it?\n\nKubernetes deployments, you can say, are nothing but containerized deployments only, with Kubernetes providing you with a framework to manage container resources, scaling and failover for your application.\nFor ex: if a container goes down, another container needs to start. Wouldn’t it be easier if this behavior was handled by a system? \nKubernetes helps us with this process and many other features that are good for the infrastructures!\n\n* Auto Scaling, \n* Self healing,\n* Service Discovery,\n* Storage orchestration\nare few among the [features](https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/#why-you-need-kubernetes-and-what-can-it-do) that the application developer receives on adapting to Kubernetes based cloud provider deployments.\n\nNow that we understand the benefits of a Kubernetes based deployment, let us understand how WaveMaker platform simplifies the deployment process.\n\n### What does an application developer need to deploy his app on DigitalOcean Cloud?\nTo deploy your application on DigitalOcean cloud, all you would need is a [DigitalOcean account](https://www.digitalocean.com/).\n\nThere are two stages involved for setting up the live/stage phase of the release pipeline with the DigitalOcean cloud provider:\n* Configuration of DigitalOcean cluster\n* Deployment of application to DigitalOcean cluster\n\n[![screenshot](/learn/assets/Supported_Cloud_Provider_DO.png)](/learn/assets/Supported_Cloud_Provider_DO.png)\n\n### Configuration of DigitalOcean cluster\n\nAfter choosing DigitalOcean Provider from the list of providers, an [access token](https://www.digitalocean.com/docs/apis-clis/api/create-personal-access-token/) needs to be provided. \n\nTo spin up a new cluster in your account some configuration details need to be provided as well:\n* cluster region, \n* cluster name and \n* cluster capacity. \n\n[![screenshot](/learn/assets/deploy_do_new_cluster.png)](/learn/assets/deploy_do_new_cluster.png)\n\nAfter providing these details WaveMaker spins up a new cluster in your Digital Ocean account. \n\nAlternatively, you may well choose to use an existing cluster already present in your account.\n[![screenshot](/learn/assets/deploy_do_existing_cluster.png)](/learn/assets/deploy_do_existing_cluster.png)\n\nThis cluster is then associated with the live/stage phase of the release pipeline.\n\n### Deployment of application to DigitalOcean cluster\nOnce the live/stage phase of the release pipeline is associated with a cluster in DigitalOcean account, you are now ready to deploy.\n\n[![screenshot](/learn/assets/Push_To_DO.png)](/learn/assets/Push_To_DO.png)\n\nThere is no need to write K8S specific yaml files or build any app images!\n\nWaveMaker automatically generates dockerfiles, builds a docker image, generates the K8S manifest files and deploys the application to cluster using K8S API's.\n\nAlso, the app memory and number of pod replicas are completely configurable from UI.\n\n[![screenshot](/learn/assets/deploy_do_app_configuration.png)](/learn/assets/deploy_do_app_configuration.png)\n\nThe cluster creation process and the app deployment process are executed as jobs and run in the background, allowing you to continue with your development while the cluster creates or the application deploys.\n\n### What happens post the app is deployed?\nNow post deployment, the app developer is returned with a Service URL which is the URL of the deployed application.\n\n[![screenshot](/learn/assets/deploy_do_deployment.png)](/learn/assets/deploy_do_deployment.png)\n\nNot only is the application deployed on a kubernetes cluster, but the platform also returns deployment specific information like\n* namespace at which the application has been deployed, \n* the image used for the deployment process, \n* the cluster version and \n* worker node size being used etc. \n\nYou can use the kubectl commands with the associated kubernetes cluster or debug the image in the associated registry.\n\n[![screenshot](/learn/assets/deploy_do_providerinfo1.png)](/learn/assets/deploy_do_providerinfo1.png)\n\n[![screenshot](/learn/assets/deploy_do_providerinfo2.png)](/learn/assets/deploy_do_providerinfo2.png)\n\nGo ahead and try out your app's first ever kubernetes deployment and let us know your experience!!\n\n### References\n* To know more about Kubernetes, see [here](https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/)\n* To know more about DigitalOcean Kubernetes, see [here](https://www.digitalocean.com/docs/kubernetes/)\n* [Detailed process for deploying a WaveMaker application on DigitalOcean cluster](/learn/app-development/deployment/deployment-to-digital-ocean)"
    },
    {
      "id": "/2020/04/22/deployments-made-better",
      "metadata": {
        "permalink": "/learn/blog/2020/04/22/deployments-made-better",
        "source": "@site/blog/2020-04-22-deployments-made-better.md",
        "title": "Deployment Experience made better!",
        "description": "Deployment is a process which enables the developers to serve the apps to users.",
        "date": "2020-04-22T00:00:00.000Z",
        "formattedDate": "April 22, 2020",
        "tags": [],
        "readingTime": 2.985,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Subodh Kumar"
          }
        ],
        "frontMatter": {
          "title": "Deployment Experience made better!",
          "author": "Subodh Kumar"
        },
        "prevItem": {
          "title": "WaveMaker Integrates with DigitalOcean Kubernetes for App Deployments",
          "permalink": "/learn/blog/2020/04/23/deployment-to-digital-ocean"
        },
        "nextItem": {
          "title": "OpenAPI support in WaveMaker",
          "permalink": "/learn/blog/2020/04/21/wavemaker-openapi-import"
        }
      },
      "content": "Deployment is a process which enables the developers to serve the apps to users. \nWith the latest release, WaveMaker has made the discovery of deployment failures in the application fast & easy.\n\n<!-- truncate -->\n\n\n### Deployment\n\nWhen user invokes Deploy operation, WaveMaker executes the maven command to build the project and generate artefacts for deployment. \nBuild steps includes angular production build  to generate optimized & compressed javascript & other front end assets. \n\nWaveMaker's One-click deploy feature allows developers deploy their application to AWS, Azure, Google Cloud or Kubernetes cluster.\n\nDuring the build process there can be failures if any of the markup, styles or scripts has issues. if the deployment of an application fails, it required some effort from the user to discover & resolve the issue in the last release as\n\n* The developer is informed about the errors post the deployment failure which usually takes couple of minutes since the deployment is triggered.\n* The user needs to analyse `build.log` file to find the exact error & its causes. The log file include framework specific messages which might be relatively hard for low code developers to comprehend & fix.\n* The build step of deployment fails for the first error it encounters. So the failure log did not include the complete list of errors in the application. This might cost the user multiple deployment operations to discover all issues & their fixes.\n\nInorder to ensure a better deployment experience, WaveMaker leveraged its Observability platform to analyse the most common deployment issues in the past releases which are listed below, \n\n* Invalid Page references\n* Invalid Partial references\n* Deleted Partial references\n* Delete Page elements such as styles, scripts\n* Referring to Invalid fonts in the styles.\n\nand developed pre-deployment validation for each. With these checks enabled prior to deployment, users can experience significantly reduced error discovery & fix timeline.\n\n### Quick discovery of Errors\n\n* The validations are run as pre-deployment step, the errors are found quickly in the order of seconds.\n\n* New Deployment flow with the validation state. \n\n[![screenshot](/learn/assets/wm-blog-deploy-01-check.png)](/learn/assets/wm-blog-deploy-01-check.png)\n\n* Error state where the user is presented with the link to check the errors which caused failure as shown below.\n\n[![screenshot](/learn/assets/wm-blog-deploy-02-error.png)](/learn/assets/wm-blog-deploy-02-error.png)\n\n\n### Complete list of Errors\n\n* The validation works with the existing Inspection framework to present the errors with details. \n* The validation scans complete application code & lists all the possible issues in one interation.\n* The results list the errors grouped by files which covers markups, script & styles. \n\n[![screenshot](/learn/assets/wm-blog-deploy-03-list.png)](/learn/assets/wm-blog-deploy-03-list.png)\n\n\n### Clear description of Errors\n* Each error includes details such as filename & exact line number which can cause deployment failure.\n* It also includes the [documentation](/learn/app-development/dev-integration/inspection-framework#__docusaurus) link, to help the developer understand the issue better & help in looking for solutions.\n\n[![screenshot](/learn/assets/wm-blog-deploy-04-detail.png)](/learn/assets/wm-blog-deploy-04-detail.png)\n\n### Convenience\n\n* The validations are added as a part of Inspection framework, the user need not trigger Deployment to find out the issues in the project. \nThe user can also trigger Inspection check in the studio to find out application issues & fix them before making a deployment request.\n\n\n* The Inspection framework in WaveMaker is a custom static code analyzer developed with popular open source frameworks\n  * [**ESLint**](https://eslint.org/) \n  * [**Stylelint**](https://stylelint.io/)\n* The Inspection framework analyse the markup, script & styles for any structure or usage which can cause deployment failure & logs it with additional metadata such as filename, line-column number, documentation links etc.\n* The Inspection framework will be equipped with more validations with each release to help users develop & debug application easily ensuring a great developer & deployment experience."
    },
    {
      "id": "/2020/04/21/wavemaker-openapi-import",
      "metadata": {
        "permalink": "/learn/blog/2020/04/21/wavemaker-openapi-import",
        "source": "@site/blog/2020-04-21-wavemaker-openapi-import.md",
        "title": "OpenAPI support in WaveMaker",
        "description": "WaveMaker now supports integration with OpenAPIs. If you have an OpenAPI definition document for your REST APIs, it can be easily integrated with a WaveMaker app. The OpenAPI Specification, originally known as the Swagger Specification, is a specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services.",
        "date": "2020-04-21T00:00:00.000Z",
        "formattedDate": "April 21, 2020",
        "tags": [],
        "readingTime": 4.96,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Vibhu Singhal"
          }
        ],
        "frontMatter": {
          "title": "OpenAPI support in WaveMaker",
          "author": "Vibhu Singhal"
        },
        "prevItem": {
          "title": "Deployment Experience made better!",
          "permalink": "/learn/blog/2020/04/22/deployments-made-better"
        },
        "nextItem": {
          "title": " WaveMaker platform is updated to use WKWebView.",
          "permalink": "/learn/blog/2020/04/20/wavemaker-wkwebview-upgrade"
        }
      },
      "content": "WaveMaker now supports integration with OpenAPIs. If you have an OpenAPI definition document for your REST APIs, it can be easily integrated with a WaveMaker app. The OpenAPI Specification, originally known as the Swagger Specification, is a specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services.\n<!-- truncate -->\n\n![OpenApi](/learn/assets/OpenAPI_Logo.png)\n\n## Introduction to OpenAPIs\n\nOpenAPI is a broadly adopted industry standard for describing modern APIs. The development of the specification is fostered by the [OpenAPI initiative](https://www.openapis.org/). It's important that you are clear with the [difference between OpenApi and swagger](https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/).\n\nThe OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for REST APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. A document (or set of documents) that defines or describes an API in called the OpenAPI definition document. An OpenAPI definition uses and conforms to the OpenAPI Specification. The specification can be found [here](http://spec.openapis.org/oas/v3.0.3).\n\n:::note\nAs of release 10.4, WaveMaker supports OAS 2.0. Support for OAS 3.0 is being worked upon. We made the OpenAPI support [more robust in 10.5](/learn/blog/2020/07/01/wavemaker-openapi-postgrest-support). Keep an eye on this space for more updates.\n:::\n\n## Advantages of working with OpenAPIs\n\nSince an OpenAPI definition document follows a standard OpenAPI specification, the document can be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.\n\nWaveMaker extends this advantage to integrate REST endpoints in a Web/Mobile application. **WaveMaker generates UI for Create, List, Update and Delete operations (CRUD) for REST APIs that confirm to OpenAPI specification**. Integrating a REST endpoint with any of the 100+ UI widgets offered by WaveMaker is also simple and straightforward without writing a single line of code.\n\nSince an OpenAPI document contains a number of APIs, WaveMaker identifies and groups a set of APIs under respective **“entities”**. For example, in an OpenAPI document, there can be multiple REST endpoints for an Employee entity. There could be respective endpoints to perform CRUD operations on this entity. While importing the OpenAPI document in WaveMaker, the platform performs a best guess algorithm to identify and map the endpoints against the respective CRUD operation. Once this is done, the app developer can make use of the Data widget combinations like Table/List with a Form and perform CRUD operations from the UI by simple drag and drop configuration without writing a single line of code.\n\nThis opens a wide range of possibilities for the platform to integrate with 3rd party REST APIs. To name a few:\n\n- supporting various server side pagination/fragmentation/sorting techniques\n- identifying relationships among various “entities”\n- performing complex filter operations on an entity\n- supporting various authentication/authorization mechanisms\n\nWe at WaveMaker are working to identify all such patterns and integrating it with the platform to provide a seamless experience. Keep an eye on this space for more updates.\n\n## Importing OpenAPI document in WaveMaker\n\nIf you already have an API document that is in accordance with OpenAPI spec 2.0, it can be imported into your WaveMaker app project and integrated with the UI widgets. Refer the following document on how to do so:  \n[Importing REST APIs via OpenAPI/Swagger](/learn/app-development/services/api-designer/import-rest-apis-swagger)\n\n## Importing an existing WaveMaker app’s APIs into another app\n\nThe good news is all the APIs generated by a WaveMaker app follow OpenAPI 2.0 specification. Hence, **a WaveMaker app's APIs are readily available for integration into another app**. All you need to do is, take the OpenAPI/swagger json file from the existing app and import it into the other app where you want to consume the APIs. You don’t need to import each API individually anymore, which is a major time save.\n\nAlso, as mentioned above, the platform will identify “entities” from the OpenAPI document and group endpoints under these. So you can now perform the CRUD operations on a DB entity just the way you could do it through a DB CRUD (live) variable without creating individual Service Variables against each endpoint and writing custom logic to hook these operations. Here is a pictorial representation of the use case:  \n![Open API Import Use Case](/learn/assets/OpenAPI_Scenario.png)\n\n## Generating OpenAPI document for existing APIs\n\nIf you chose a RAD platform like WaveMaker to build/modernize an app, chances are you already have a set of APIs to consume and plug the UI with. These endpoints can be on various back-end technologies, but the advantage with an OpenAPI document is that it is language agnostic.\n\nDue to its open source nature, wide variety of frameworks support automatic generation of the OpenAPI document through code. Here is a list of **language-specific tools** you can use to generate OpenAPI document for your APIs.\n\n### Java\n\nSpring developers can use [springfox](https://github.com/springfox/springfox), while JAX-RS developers can leverage [swagger-core](https://github.com/swagger-api/swagger-core). The Swagger Maven Plugin even works with both.\n\n### ASP.NET\n\nThe Microsoft world supports OpenAPI, too. ASP.NET developers can install the [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle) package and easily generate a specification for their APIs.\n\n### Python\n\nDjango developers can add the [django-rest-swagger](https://github.com/marcgibbons/django-rest-swagger) module via pip, whereas [Flask-RESTPLUS](https://github.com/noirbizarre/flask-restplus) has Swagger support built in.\n\n### Javascript/Node\n\nApplications built in Node frequently use Express or HAPI as their framework. Third-party modules called [swagger-express](https://www.npmjs.com/package/swagger-express) and [hapi-swagger](https://www.npmjs.com/package/hapi-swagger) are available for those.\n\n### Ruby\n\nThe [grape-swagger](https://github.com/ruby-grape/grape-swagger) gem provides full OpenAPI support and works well with other gems, such as [grape-entity](https://github.com/ruby-grape/grape-entity). With the latter, it is possible to define models and use them in the specification as well as for input validation.\n\n### Go\n\n[Goswagger](https://goswagger.io/) is available for all the Go developers out there. It is a large package that is not limited to the use-case of self-documenting APIs but allows all kinds of work with Swagger and OpenAPI definitions in Go.\n\n## References\n\n- OpenAPI initiative official space: [https://www.openapis.org](https://www.openapis.org/)\n- Swagger official space: [https://swagger.io](https://swagger.io/)\n- How to generate OpenAPI definition from code: [https://www.blazemeter.com/blog/how-to-generate-openapi-definitions-from-code](https://www.blazemeter.com/blog/how-to-generate-openapi-definitions-from-code)\n- [Importing REST APIs via OpenAPI/Swagger](/learn/app-development/services/api-designer/import-rest-apis-swagger)"
    },
    {
      "id": "/2020/04/20/wavemaker-wkwebview-upgrade",
      "metadata": {
        "permalink": "/learn/blog/2020/04/20/wavemaker-wkwebview-upgrade",
        "source": "@site/blog/2020-04-20-wavemaker-wkwebview-upgrade.md",
        "title": " WaveMaker platform is updated to use WKWebView.",
        "description": "Problem",
        "date": "2020-04-20T00:00:00.000Z",
        "formattedDate": "April 20, 2020",
        "tags": [],
        "readingTime": 2.5,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Srinivasa Rao Boyina"
          }
        ],
        "frontMatter": {
          "title": " WaveMaker platform is updated to use WKWebView.",
          "author": "Srinivasa Rao Boyina"
        },
        "prevItem": {
          "title": "OpenAPI support in WaveMaker",
          "permalink": "/learn/blog/2020/04/21/wavemaker-openapi-import"
        },
        "nextItem": {
          "title": "Deliver WaveMaker Apps as Micro Frontend Modules",
          "permalink": "/learn/blog/2020/02/25/wavemaker-micro-front-end-support"
        }
      },
      "content": "## Problem \n\nApple deprecated UIWebView and introduced WKWebView. Starting from April 1st, 2020, Apple stopped accepting all new apps that have references to UIWebView. From December 2020, Apple will stop accepting app updates that have references to UIWebView. The current version Cordova that is used in WaveMaker, uses UIWebView by default.\n\n<!-- truncate -->\n\n> WaveMaker allows creation of mobile applications by a simple drag and drop approach. [Click here to know more](/learn/hybrid-mobile/first-mobile-app).\n  \n## Solution\nCordova created a plugin called [cordova-plugin-wkwebview-engine](https://github.com/apache/cordova-plugin-wkwebview-engine). This plugin brings WKWebView of iOS into cordova. Due to its restrictions imposed by WKWebview, two problems araised.\n\n 1. Cordova by default loads index.html using file:// scheme. WKWebView is blocking access from html page (loaded via file://) to files outside of application directory.\n 2. UIWebView allowed CORS requests even if CORS is not enabled in the server. But, WKWebView blocks cross-origin requests unless CORS allowed by server. In WaveMaker, CORS is optional.\n 3. It doesnot store cookies from third party domains (domains other than the domain that html file is loaded). WaveMaker uses Cookie based authentication.\n\n[cordova-plugin-local-webserver](https://github.com/wavemaker/cordova-plugin-local-webserver) is a cordova plugin that serves the app files over http by hosting a server with in the app. This helps in resolving problem1.\n\n[cordova-plugin-advanced-http](https://github.com/wavemaker/cordova-plugin-advanced-http) is a cordova plugin that provides API (instead of xhr) to make http calls to the remote server. Using this plugin API, a wrapper is created to replace XHR so that all existing XHR calls work as earlier. This plugin routes all requests through native layer that doesnot block cross-origin requests. This plugin also persist cookies from all domains and send them in appropriate requests. This plugin helps in resolving problem 2 and 3.\n\nIn addition to the above, Cordova framework and plugins may have references to UIWebView. Cordova team addressed these framework level changes in cordova-ios@5.1.0. They added a preference called 'WKWebViewOnly'. If this preference is set to 'true', then UIWebView references in the cordova framework are replaced with WKWebView. Out of all the plugins that are supported by WaveMaker, cordova-plugin-inappbrowser has UIWebView reference. cordova-plugin-inappbrowser removed those references in version 3.2.0. So, that plugin is upgraded to 3.2.0.\n\n  \n#### Developer Action Required\nWith WaveMaker 10.4 release, platform has no references to UIWebView. Developer has to make sure that all third party plugins (if any) also have no references to UIWebView in their code. If references are present, contact respective plugin-developer for a newer version of the plugin. \n\n## Known Issues\n\n 1. cordova-ios@5.1.0 is not supported by build.phonegap.com. When publishing **new app**, ipa has to be created [manually](/learn/hybrid-mobile/mobile-build-manual). For all development builds (even for new) and distribution builds for app updates, phonegap service can still be used.\n 2. While uploading a file, there is no pogress event avaiable in cordova-plugin-advanced-http plugin. Currently, a synthetic progress event is created which just mimics but doesnot corelate with the actual progress of operation.\n\n## References\n\n 1. Apache Cordova blog about using WKWebView. [https://cordova.apache.org/howto/2020/03/18/wkwebviewonly.html](https://cordova.apache.org/howto/2020/03/18/wkwebviewonly.html)\n 2. Issue with WKWebView. [https://github.com/apache/cordova-plugin-wkwebview-engine/issues/56](https://github.com/apache/cordova-plugin-wkwebview-engine/issues/56)\n 3. Cookie Issue with WKWebView. [https://bugs.webkit.org/show_bug.cgi?id=140205](https://bugs.webkit.org/show_bug.cgi?id=140205)\n 4. Progress issue in cordova-plugin-advanced-http. [https://github.com/silkimen/cordova-plugin-advanced-http/issues/88](https://github.com/silkimen/cordova-plugin-advanced-http/issues/88)"
    },
    {
      "id": "/2020/02/25/wavemaker-micro-front-end-support",
      "metadata": {
        "permalink": "/learn/blog/2020/02/25/wavemaker-micro-front-end-support",
        "source": "@site/blog/2020-02-25-wavemaker-micro-front-end-support.md",
        "title": "Deliver WaveMaker Apps as Micro Frontend Modules",
        "description": "A real-world application is composed of multiple modules. Changes or upgrades to a given module can impact other modules and add more testing effort to the development timeline. Including a new technology into the existing app might be challenging as the existing app might not include all support, such as the build process.",
        "date": "2020-02-25T00:00:00.000Z",
        "formattedDate": "February 25, 2020",
        "tags": [],
        "readingTime": 4.2,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Subodh Kumar"
          }
        ],
        "frontMatter": {
          "title": "Deliver WaveMaker Apps as Micro Frontend Modules",
          "author": "Subodh Kumar"
        },
        "prevItem": {
          "title": " WaveMaker platform is updated to use WKWebView.",
          "permalink": "/learn/blog/2020/04/20/wavemaker-wkwebview-upgrade"
        },
        "nextItem": {
          "title": "All-new WaveMaker docs with a powerful Search",
          "permalink": "/learn/blog/2019/12/13/new-doc-search-feature"
        }
      },
      "content": "A real-world application is composed of multiple modules. Changes or upgrades to a given module can impact other modules and add more testing effort to the development timeline. Including a new technology into the existing app might be challenging as the existing app might not include all support, such as the build process. \n\n:::note\nFor more information about developing Micro Frontend modules, see [Developing Micro Frontend Modules in WaveMaker](/learn/app-development/sspa/micro-frontend).\n::: \n\n<!-- truncate -->\n\n## What are Micro Frontends\n\nOne of the practices which simplify the development and maintenance of such apps is to decompose the application into modules that can be independently developed, tested, and deployed. This is known as the **MicroServices** pattern. \n\nAdapting these practices to frontend systems enables us to generate independent, composable application modules. Such modules are called [**Micro Frontends**](https://www.martinfowler.com/articles/micro-frontends.html). \n\nThis practice helps teams develop modules in parallel, deliver customer-facing solutions quickly, learn directly from customer feedback and improve the module for better adoption. Organizing teams this way to have a direct customer visible deliverable is a key ingredient in setting smaller teams for success by letting their customers connect with the teacher. Adopting or validating new technology for a new feature or replacing an existing feature can be progressively achieved without affecting other app entities.\n\nFor enterprises that want to modernize their applications by adopting micro frontend, the architecture gives them a delivery model where they can start deploying modernized modules into their existing application. \n\nAs the modules are independent of each other, below are the key gains. \n\n- Reduced development time and testing effort\n- Parallel and Incremental addition of features\n- Enables using different technology, frameworks for development and delivery\n- Ease of integration of new modules into existing systems\n\n## Implementation approaches\n\nThere are many approaches to implementing the **Micro Frontend** pattern to an existing or new application. Let's take an example of an 'e-cart' app to explain the approaches to implementing Micro Frontends to an existing monolith app.\n\nA typical 'e-cart' app can be grouped into below listed main modules.\n\n**Catalogue**: The available items are managed.\n**User Profile**: The user-related operations are handled, such as his info\n**Orders**: The order related info such as history, status are managed\n**Payments**: The payment-related info such as mode, status is managed\n\nEach of the above can be built into a deployable module bundle. Below are some of the approaches that can be adopted to compose them and serve as an application using the Micro Frontends pattern.\n\n### Container Application\n\nWith this model, there can be one container module that can \n\n- House common UI elements such as Headers, Footers, etc. \n- Handles common operations such as authentication and navigation. \n- Loads and unloads each 'Micro Frontend' module based on the user action.\n\n### Server Side Composition\n\nWith this model, \n\n- The app is served through an HTML page rendered on the server-side. \n- The page is composed of common elements and placeholders.\n- The page uses server-specific plugins to render MicroFront modules in the placeholders of the HTML as per the need.\n\n### Build Time Composition\n\nWith this model, \n\n- Each Micro Frontend module is published as an independent package.\n- The container app will include the packages as library dependency and produce a single deployable Bundle on building\n- However, a change in any module will require rebuilding the container bundle (in turn, rebuilds all the dependent modules) to be served, making it not a good approach to adopt.\n\n### Run Time Composition\n\nWith this model, \n\n- Each Micro Frontend module is built as an independent script and exposes a global function as its entry point.\n- Each Module can also be built as Web Components.\n- The container application will have the logic to load required modules on demand and render them into the required DOM node.\n\nWith all the approaches and advantages described above, this pattern does come with some costs listed below,\n\n- The approach might cause an increase in Payload size if the modules share dependencies as the modules are built separately with dependencies.\n- Increase operational cost as each module might involve a different build and delivery approach.\n\n## Single-spa framework in WaveMaker \n\n:::note\nFor more information about developing Micro Frontend modules, see [Delivering WaveMaker Apps as Micro Frontend modules](/learn/app-development/sspa/micro-frontend).\n::: \n\n**Single-spa** framework allows you to compose and serve multi-framework modules into an app by including a compatible JavaScript bundle. When built, a real-world web application will not just generate JS bundles but also produce CSS and other metadata artifacts. Currently, the **Single-spa** framework does not have any specific way of loading non-code, non-JS artifacts. For this reason, the users are requested to add the additional scripts in the steps mentioned above.\n\nWaveMaker is planning to work on a loader script that will load all the artifacts required for a WaveMaker app to work with **Single-spa** without the need for any additional loading scripts and provide seamless integration support in the coming releases.\n\n###  Screenshots of Sample S-spa\n\n#### Home\n\n[![screenshot](/learn/assets/wm-sspa-ss-home.png)](/learn/assets/wm-sspa-ss-home.png)\n\n#### Angular App\n\n[![screenshot](/learn/assets/wm-sspa-ss-ng.png)](/learn/assets/wm-sspa-ss-ng.png)\n\n#### WaveMaker App\n\n[![screenshot](/learn/assets/wm-sspa-ss-wm.png)](/learn/assets/wm-sspa-ss-wm.png)"
    },
    {
      "id": "/2019/12/13/new-doc-search-feature",
      "metadata": {
        "permalink": "/learn/blog/2019/12/13/new-doc-search-feature",
        "source": "@site/blog/2019-12-13-new-doc-search-feature.md",
        "title": "All-new WaveMaker docs with a powerful Search",
        "description": "We released the new WaveMaker Docs site on the 14 November 2019. We migrated from WordPress to Docusaurus with easy-to-edit markdown files. This change has also increased the contributions from our team members.",
        "date": "2019-12-13T00:00:00.000Z",
        "formattedDate": "December 13, 2019",
        "tags": [],
        "readingTime": 3.145,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "All-new WaveMaker docs with a powerful Search",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "Deliver WaveMaker Apps as Micro Frontend Modules",
          "permalink": "/learn/blog/2020/02/25/wavemaker-micro-front-end-support"
        },
        "nextItem": {
          "title": "Welcome to the WaveMaker Developers Blog",
          "permalink": "/learn/blog/2019/11/01/developers-team-blog"
        }
      },
      "content": "We [released](/improve-your-app-development-experience-with-the-new-wavemaker-docs/) the new WaveMaker Docs site on the 14 November 2019. We migrated from WordPress to [Docusaurus](https://docusaurus.io/) with easy-to-edit markdown files. This change has also increased the contributions from our team members. \n\n<!--truncate-->\n\nSince the release, we continued to make changes and improvements to the site very frequently, and now we have fully adapted to the new [GitHub workflow](https://guides.github.com/introduction/flow/). \n\nIn the recent additions to the site, we implemented the search, which was one of the most-waited and most-requested features. While WaveMaker documentation is well-indexed by Google; additionally, it has the ability to search within the site, which makes it easy to discover content inside and outside. \n\n[![Screenshot](/learn/assets/search-here.png)](/learn/assets/search-here.png)\n\n## What we used\n\nImplementing an entirely new documentation site was a different story while integrating the search was another ([read more](https://github.com/wavemaker/docs/pull/95)). We went with [algolia](https://www.algolia.com/) community project called 'DocSearch' which offers fast, accurate and robust search results.\n\nAlgolia DocSearch is a popular hosted search and many open-source communities use it, including React, Vue, Bootstrap, Netlify, Paypal, and more. It shows real-time results instantly as you type. We are happy with how it offered the flexibility to make our own customizations.\n\n### With DocSearch\n\n- Algolia crawls documentation every 24 hours and creates a search index in its server. \n- It automatically tracks internal links to make sure that the content does not miss away.\n- It uses the semantics of the HTML structure to construct records.\n\n## The journey of the Search Implementation\n\nWe admit that the journey behind this implementation was quite interesting, in a good way of course. The integration with algolia DocSearch as a ready-to-use service was fairly smooth. Though, there were few challenges from Docusaurus for placing the search into the setup it offered. \n\nLet's first see how it looked before and what we did to make the search look neat and responsive across all devices.\n\n### Search before\n\nIt did the job. But was it enough? Docusaurus does not allow modifying the header. The default search was overlapping the navigation menu in smaller screens. This hampered the user experience of mobile users. See the \"before\" screens below.\n\n<!--DOCUSAURUS_CODE_TABS-->\n<!--Mobile_View-->\n\n- In the mobile view, two headers were occupying more space and menu items were accessible only by scrolling horizontal ways. \n\n[![screenshot](/learn/assets/search-plain.png)](/learn/assets/search-plain.png)\n\n<!--Mobile_View_Stage_two-->\n\n[![screenshot](/learn/assets/search-stage-two.png)](/learn/assets/search-stage-two.png)\n\n<!--Web_View-->\n\n- Default colors applied automatically, but content got over-crowded. \n\n[![screenshot](/learn/assets/before-search.png)](/learn/assets/before-search.png)\n\n<!--END_DOCUSAURUS_CODE_TABS-->\n\n\n### What we did\nDocs are the key source to find solutions instantly with hundreds of documents to filter from. Algolia took care of the technicality, and we took care of the rest. We consulted our UX team and developer to customize the search to match our theme and display results to access docs with ease and responsiveness.\n\nWe developed a custom script that injects dynamic HTML into the website. This means, whenever the documentation page loads, it builds a dropdown menu with options while injecting it into the header in the hidden mode. It also adds event listeners to show and hide menu items. This dropdown works in the mobile view only. We hide the horizontal menu, whilst we expand the search area for better visibility as shown in the screen below. \n\n### ta-da!\n\n[![](/learn/assets/mobile-view-search.png)](/learn/assets/mobile-view-search.png)\n\nWhen you access WaveMaker Docs in the mobile view, simply click the \"Docs\" option. It opens the menu vertically without interrupting the user experience. The dropdown menu can be closed by clicking anywhere on the page.\n\n[![](/learn/assets/dropdown-mobile-view.png)](/learn/assets/dropdown-mobile-view.png)\n\n### What more?\n\nWe improvised the web view, too! \n\n[![](/learn/assets/new-search-wavemaker.png)](/learn/assets/new-search-wavemaker.png)\n\nTry it for yourself to see how fast and accurately it works.\n\nIf you are interested to learn more about how we implemented this, see the pull request [details](https://github.com/wavemaker/docs/pull/95).\n\nWe are constantly working on improving the documentation to make it better every day. If you notice something broken, please report to us by logging an [issue here](https://github.com/wavemaker/docs/issues)."
    },
    {
      "id": "/2019/11/01/developers-team-blog",
      "metadata": {
        "permalink": "/learn/blog/2019/11/01/developers-team-blog",
        "source": "@site/blog/2019-11-01-developers-team-blog.md",
        "title": "Welcome to the WaveMaker Developers Blog",
        "description": "WaveMaker is evolving with new changes and updates to the product frequently. We are trilled to introduce the team blog feed for more specific and detailed technical stuff directly from the developers.",
        "date": "2019-11-01T00:00:00.000Z",
        "formattedDate": "November 1, 2019",
        "tags": [],
        "readingTime": 0.265,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Swetha Kundaram"
          }
        ],
        "frontMatter": {
          "title": "Welcome to the WaveMaker Developers Blog",
          "author": "Swetha Kundaram"
        },
        "prevItem": {
          "title": "All-new WaveMaker docs with a powerful Search",
          "permalink": "/learn/blog/2019/12/13/new-doc-search-feature"
        }
      },
      "content": "WaveMaker is evolving with new changes and updates to the product frequently. We are trilled to introduce the team blog feed for more specific and detailed technical stuff directly from the developers. \n\nStay up-to-date about the product and know what's happening inside our WaveMaker towers. Our team will keep you posted.\n\nStay tuned!"
    }
  ]
}